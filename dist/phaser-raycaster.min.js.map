{"version":3,"file":"phaser-raycaster.min.js","mappings":"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","sources":["webpack://PhaserRaycaster/webpack/universalModuleDefinition","webpack://PhaserRaycaster/./src/main.js","webpack://PhaserRaycaster/./src/map/boundingBox.js","webpack://PhaserRaycaster/./src/map/config.js","webpack://PhaserRaycaster/./src/map/destroy.js","webpack://PhaserRaycaster/./src/map/map-circle-methods.js","webpack://PhaserRaycaster/./src/map/map-container-methods.js","webpack://PhaserRaycaster/./src/map/map-core.js","webpack://PhaserRaycaster/./src/map/map-line-methods.js","webpack://PhaserRaycaster/./src/map/map-matterBody-methods.js","webpack://PhaserRaycaster/./src/map/map-polygon-methods.js","webpack://PhaserRaycaster/./src/map/map-rectangle-methods.js","webpack://PhaserRaycaster/./src/map/map-tilemap-methods.js","webpack://PhaserRaycaster/./src/map/segmentsCount.js","webpack://PhaserRaycaster/./src/ray/angle.js","webpack://PhaserRaycaster/./src/ray/cast.js","webpack://PhaserRaycaster/./src/ray/castCircle.js","webpack://PhaserRaycaster/./src/ray/castCone.js","webpack://PhaserRaycaster/./src/ray/cone.js","webpack://PhaserRaycaster/./src/ray/config.js","webpack://PhaserRaycaster/./src/ray/debug.js","webpack://PhaserRaycaster/./src/ray/destroy.js","webpack://PhaserRaycaster/./src/ray/enablePhysics.js","webpack://PhaserRaycaster/./src/ray/matter-physics-methods.js","webpack://PhaserRaycaster/./src/ray/origin.js","webpack://PhaserRaycaster/./src/ray/overlap.js","webpack://PhaserRaycaster/./src/ray/range.js","webpack://PhaserRaycaster/./src/ray/ray-core.js","webpack://PhaserRaycaster/./src/ray/ray.js","webpack://PhaserRaycaster/./src/ray/slice.js","webpack://PhaserRaycaster/./src/ray/stats.js","webpack://PhaserRaycaster/./src/raycaster-core.js","webpack://PhaserRaycaster/webpack/bootstrap","webpack://PhaserRaycaster/webpack/runtime/define property getters","webpack://PhaserRaycaster/webpack/runtime/hasOwnProperty shorthand","webpack://PhaserRaycaster/webpack/runtime/make namespace object","webpack://PhaserRaycaster/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"PhaserRaycaster\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"PhaserRaycaster\"] = factory();\n\telse\n\t\troot[\"PhaserRaycaster\"] = factory();\n})(self, function() {\nreturn ","/**\n* @author       Marcin Walczak <contact@marcin-walczak.pl>\n* @copyright    2023 Marcin Walczak\n* @license      {@link https://github.com/wiserim/phaser-raycaster/blob/master/LICENSE|MIT License}\n*/\n\n/**\n * Point object\n * @typedef {Object} Point\n * @property {number} x\n * @property {number} y\n */\n \n/**\n * @classdesc\n *\n * Raycaster plugin class.\n * \n * @namespace PhaserRaycaster\n * @class PhaserRaycaster\n * @extends Phaser.Plugins.ScenePlugin\n * @constructor\n * @since 0.6.0\n *\n * @param {Phaser.Scene} scene\n * @param {Phaser.Plugins.PluginManager} pluginManager\n */\n\nclass PhaserRaycaster extends Phaser.Plugins.ScenePlugin {\n    constructor(scene, pluginManager) {\n        super(scene, pluginManager);\n\n        this._Raycaster = require('./raycaster-core.js').Raycaster;\n    }\n\n    /**\n    * Create Raycaster object.\n    *\n    * @method PhaserRaycaster#createRaycaster\n    * @memberof PhaserRaycaster\n    * @instance\n    * @since 0.6.0\n    *\n    * @param {object} [options] - Raycaster's congfiguration options. May include:\n    * @param {number} [options.mapSegmentCount = 0] - Number of segments of circle maps. If set to 0, map will be teste\n    * @param {(object|object[])} [options.objects] - Game object or array of game objects to map.\n    * @param {Phaser.Geom.Rectangle} [options.boundingBox] - Raycaster's bounding box. If not passed, {@link Raycaster Raycaster} will set it's bounding box based on Arcade Physics / Matter physics world bounds.\n    * @param {boolean} [options.autoUpdate = true] - If set true, automatically update dynamic maps on scene update event.\n    * @param {boolean|object} [options.debug] - Enable debug mode or configure it {@link Raycaster#debugOptions debugOptions}.\n    *\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\n    */\n    createRaycaster(options = {}) {\n        options.scene = this.scene;\n        return new this._Raycaster(options);\n    }\n}\n\n//Make sure you export the plugin for webpack to expose\nmodule.exports = PhaserRaycaster;","/**\n* Get mapped object's bounding box.\n*\n* @method Raycaster.Map#matterBody.getBoundingBox\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.9.0\n*\n* @return {Phaser.Geom.Rectangle} - Mapped object's bounding box.\n*/\nexport function getBoundingBox() {\n    return this.object.getBounds();\n}\n","let rectangle = require('./map-rectangle-methods.js');\nlet line = require('./map-line-methods.js');\nlet polygon = require('./map-polygon-methods.js');\nlet arc = require('./map-circle-methods.js');\nlet container = require('./map-container-methods.js');\nlet tilemap = require('./map-tilemap-methods.js');\nlet matterBody = require('./map-matterBody-methods.js');\nlet segmentCount = require('./segmentsCount.js');\nlet boundingBox = require('./boundingBox.js');\n\n/**\n * Configure map.\n *\n * @method Raycaster.Map#config\n * @memberof Raycaster.Map\n * @instance\n * @since 0.6.0\n *\n * @param {object} [options] - Map's congfiguration options. May include:\n * @param {object} options.object - Game object to map\n * @param {string} [options.type] - Map type. If not defined, it will be determined based on object.\n * @param {boolean} [options.dynamic = false] - If set true, map will be dynamic (updated on scene update event).\n * @param {boolean} [options.active = true] - If set true, map will be active (will provide points, segments and will be updated).\n * @param {number} [options.segmentCount] - Circle map's segment count. If set to 0, map won't be generating segments and relay only on tangent points calculated for currently testing ray.\n * @param {object} [options.mapChild] - Container's child. If set, only set child will be mapped.\n * @param {boolean} [options.forceConvex] - If set true, matter body map will use convex body (hull) for non-covex bodies.\n * @param {boolean} [options.forceVerticesMapping] - If set true, matter body map will use only vertices for mapping circle bodies.\n * \n * @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n */\nexport function config(options) {\n    this.object = options.object;\n    //object type\n    if(options.type === undefined)\n        options.type = options.object.type;\n    if(options.type === 'body' || options.type === 'composite')\n        options.type = 'MatterBody';\n    this.type = options.type;\n    \n    switch(options.type) {\n        case 'Polygon':\n            this.getPoints = polygon.getPoints;\n            this.getSegments = polygon.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = polygon.updateMap;\n            break;\n        case 'Arc':\n            //circle segments count\n            this.segmentCount = (options.segmentCount) ? options.segmentCount : 0;\n            this.circle = (options.segmentCount) ? false : true;\n            this.getPoints = arc.getPoints;\n            this.getSegments = arc.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = arc.updateMap;\n            this.setSegmentCount = segmentCount.setSegmentCount;\n            break;\n        case 'Line':\n            this.getPoints = line.getPoints;\n            this.getSegments = line.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = line.updateMap;\n            break;\n        case 'Container':\n            //container's child\n            this.mapChild = (options.mapChild) ? options.mapChild : null;\n            //circle segments count\n            this.segmentCount = (options.segmentCount) ? options.segmentCount : 0;\n            //transformed container's circle children\n            this._circles = [];\n            this.getPoints = container.getPoints;\n            this.getSegments = container.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = container.updateMap;\n            this._updateChildMap = container._updateChildMap;\n            this.setSegmentCount = segmentCount.setSegmentCount;\n            break;\n        case 'StaticTilemapLayer':\n            //ray colliding tiles\n            this.collisionTiles = (options.collisionTiles) ? options.collisionTiles : [];\n            this.getPoints = tilemap.getPoints;\n            this.getSegments = tilemap.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = tilemap.updateMap;\n            this.setCollisionTiles = tilemap.setCollisionTiles;\n            //reset tilemap origin\n            this.object.setOrigin(0,0);\n            break;\n        case 'DynamicTilemapLayer':\n            //ray colliding tiles\n            this.collisionTiles = (options.collisionTiles) ? options.collisionTiles : [];\n            this.getPoints = tilemap.getPoints;\n            this.getSegments = tilemap.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = tilemap.updateMap;\n            this.setCollisionTiles = tilemap.setCollisionTiles;\n            //reset tilemap origin\n            this.object.setOrigin(0,0);\n            break;\n        case 'TilemapLayer':\n            //ray colliding tiles\n            this.collisionTiles = (options.collisionTiles) ? options.collisionTiles : [];\n            this.getPoints = tilemap.getPoints;\n            this.getSegments = tilemap.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = tilemap.updateMap;\n            this.setCollisionTiles = tilemap.setCollisionTiles;\n            //reset tilemap origin\n            this.object.setOrigin(0,0);\n            break;\n        case 'MatterBody':\n            //force convex body (hull) mapping\n            this.forceConvex = (options.forceConvex) ? true : false;\n            //force mapping by vertices\n            this.forceVerticesMapping = (options.forceVerticesMapping) ? true : false;\n            this.circle = false;\n            this.getPoints = matterBody.getPoints;\n            this.getSegments = matterBody.getSegments;\n            this.getBoundingBox = matterBody.getBoundingBox;\n            this.updateMap = matterBody.updateMap;\n            break;\n        default:\n            this.getPoints = rectangle.getPoints;\n            this.getSegments = rectangle.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = rectangle.updateMap;\n    }\n\n    //if object is not supported\n    if(this.type != 'MatterBody' && typeof this.object.getBounds !== 'function') {\n        this.notSupported = true;\n    }\n\n    //dynamic map\n    this.dynamic = (options.dynamic == true) ? true : false;\n\n    //enable/disable map\n    this.active = (options.active !== undefined) ? options.active : true;\n\n    return this;\n}\n","/**\r\n * Destroy object\r\n *\r\n * @method Raycaster.Map#destroy\r\n * @memberof Raycaster.Map\r\n * @instance\r\n * @since 0.10.3\r\n */\r\n export function destroy() {\r\n    //destroy reference to map object in mapped object\r\n    if(this.object.type === 'body' || this.object.type === 'composite') {\r\n        delete this.object.raycasterMap;\r\n    }\r\n    else if(this.object.data) {\r\n        this.object.data.remove('raycasterMap');\r\n    }\r\n\r\n    for(let key in this) {\r\n        delete this[key];\r\n    }\r\n }","/*Map methods for circles*/\n/**\n* Get array of mapped circle's vertices used as rays targets.\n* If {@link Raycaster.Map#segmentCount Raycaster.Map#segmentCount} is set to 0, it'll calculatoe tangent points for passed ray.\n*\n* @method Raycaster.Map#arc.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @param {Raycaster.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n\n    if(this._points.length > 0)\n        return this._points;\n    \n    let points = [];\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * (this.object.originX - 0.5);\n    offset.y = this.object.y - this.object.displayHeight * (this.object.originY - 0.5);\n\n    //calculate tangent rays\n    if(ray) {\n        let rayA = new Phaser.Geom.Line();\n        let rayB = new Phaser.Geom.Line();\n        let c;\n        \n        let rotation = this.object.rotation;\n        \n        if(rotation !== 0) {\n            let vector = new Phaser.Geom.Line(this.object.x, this.object.y, offset.x, offset.y);\n            Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n            let cB = vector.getPointB();\n            c = new Phaser.Geom.Line(ray.origin.x, ray.origin.y, cB.x, cB.y);\n        }\n        else { \n            c = new Phaser.Geom.Line(ray.origin.x, ray.origin.y, offset.x, offset.y);\n        }\n\n        let rayLength = Math.sqrt(Math.pow(Phaser.Geom.Line.Length(c), 2) - Math.pow(this.object.radius * this.object.scaleX, 2));\n\n        //ray angle\n        let angle = Phaser.Geom.Line.Angle(c);\n        let dAngle = Math.asin((this.object.radius * this.object.scaleX) / Phaser.Geom.Line.Length(c));\n        Phaser.Geom.Line.SetToAngle(rayA, ray.origin.x, ray.origin.y, angle - dAngle, rayLength);\n        Phaser.Geom.Line.SetToAngle(rayB, ray.origin.x, ray.origin.y, angle + dAngle, rayLength);\n\n        //adding tangent points\n        points.push(rayA.getPointB());\n        points.push(rayB.getPointB());\n    }\n\n    return points;\n};\n\n/**\n* Get array of mapped circle's segments used to test object's intersection with ray.\n* If {@link Raycaster.Map#segmentCount Raycaster.Map#segmentCount} is set to 0, it'll return empty array.\n*\n* @method Raycaster.Map#arc.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n    return this._segments;\n};\n\n/**\n* Update circles's map of points and segments.\n*\n* @method Raycaster.Map#arc.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    if(!this.segmentCount) {\n        this._points = [];\n        this._segments = [];\n        return this;\n    }\n    \n    //calculate offset based on object position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX + this.object.radius * this.object.scaleX;\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY + this.object.radius * this.object.scaleY;\n\n    //get points surrounding circle\n    let points = this.object.geom.getPoints(this.segmentCount);\n    let segments = []\n\n    //set points\n    //calculate positions after object's rotation\n    let rotation = this.object.rotation;\n    if(rotation !== 0) {\n        let newPoints = [];\n        for(let point of points) {\n            let vector = new Phaser.Geom.Line(this.object.x, this.object.y, this.object.x + (point.x + this.object.radius) * this.object.scaleX, this.object.y + (point.y + this.object.radius) * this.object.scaleY);\n            Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n            newPoints.push(vector.getPointB());\n        }\n        points = newPoints;\n    }\n    //if rotation === 0\n    else {\n        for(let point of points) {\n            point.x = point.x * this.object.scaleX + offset.x;\n            point.y = point.y * this.object.scaleY + offset.y;\n        }\n    }\n\n    //set segments\n    for(let i = 0, length = points.length; i < length; i++) {\n        if(i+1 < length)\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));\n        else\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[0].x, points[0].y));\n    }\n\n    this._points = points;\n    this._segments = segments;\n    return this;\n};\n","/*Map methods for containers*/\n/**\n* Get array of mapped container's and its children vertices used as rays targets.\n*\n* @method Raycaster.Map#container.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.1\n*\n* @param {Raycaster.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n* @param {boolean} [isChild] - Flag definig if it is child container.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false, isChild = false) {\n    if(!this.active)\n        return [];\n\n    let points = this._points;\n    //calculate offset based on container position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\n\n    //get tangent points of container's circles\n    if(this.segmentCount == 0 && !isChild) {\n        if(ray) {\n            //create temporary ray\n            let vector = new Phaser.Geom.Line(0, 0, ray.origin.x - offset.x, ray.origin.y - offset.y);\n            Phaser.Geom.Line.SetToAngle(vector, 0, 0, Phaser.Geom.Line.Angle(vector) - this.object.rotation, Phaser.Geom.Line.Length(vector));\n    \n            let tempRay = ray._raycaster.createRay({\n                origin: {\n                    x: vector.getPointB().x,\n                    y: vector.getPointB().y\n                }\n            });\n\n            //calculate tangent rays\n            let rayA = new Phaser.Geom.Line();\n            let rayB = new Phaser.Geom.Line();\n            let c;\n\n            for(let circle of this._circles) {\n                circle.points = [];\n                c = new Phaser.Geom.Line(ray.origin.x, ray.origin.y, circle.x, circle.y);\n\n                let rayLength = Math.sqrt(Math.pow(Phaser.Geom.Line.Length(c), 2) - Math.pow(circle.radius, 2));\n\n                //ray angle\n                let angle = Phaser.Geom.Line.Angle(c);\n                let dAngle = Math.asin((circle.radius) / Phaser.Geom.Line.Length(c));\n                Phaser.Geom.Line.SetToAngle(rayA, ray.origin.x, ray.origin.y, angle - dAngle, rayLength);\n                Phaser.Geom.Line.SetToAngle(rayB, ray.origin.x, ray.origin.y, angle + dAngle, rayLength);\n\n                //adding tangent points\n                circle.points.push(rayA.getPointB());\n                circle.points.push(rayB.getPointB());\n                points.push(rayA.getPointB());\n                points.push(rayB.getPointB());\n            }\n        }\n    }\n    \n    return points;\n};\n\n/**\n* Get array of mapped container's and its children segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#container.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.1\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n\n    return this._segments;\n};\n\n/**\n* Update container's and its children maps of points and segments.\n*\n* @method Raycaster.Map#container.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.1\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    let points = [];\n    let segments = [];\n    let container = this.object;\n    this._circles = [];\n\n    //calculate offset based on container position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\n\n    let rotation = container.rotation;\n\n    if(this.mapChild) {\n        this._updateChildMap(this.mapChild, points, segments, rotation, offset);\n    }\n    else {\n        //iterate through container's children\n        container.iterate(function(child){\n            this._updateChildMap(child, points, segments, rotation, offset);\n        }.bind(this));\n\n        //get children intersections\n        for(let i = 0, iLength = container.list.length; i < iLength; i++){\n            let childA = container.list[i];\n            let mapA = childA.data.get('raycasterMap');\n            \n            if(!mapA)\n                continue;\n\n            for(let j = i+1, jLength = container.list.length; j < jLength; j++){\n                let childB = container.list[j];\n                let mapB = childB.data.get('raycasterMap');\n                //check if bounding boxes overlap\n                if(!mapB || !Phaser.Geom.Intersects.RectangleToRectangle(childA.getBounds(), childB.getBounds()))\n                    continue;\n\n                //find objects intersections\n                for(let segmentA of mapA.getSegments()) {\n                    for(let segmentB of mapB.getSegments()) {\n                        let intersection = [];\n                        if(!Phaser.Geom.Intersects.LineToLine(segmentA, segmentB, intersection))\n                            continue;\n                        \n                        //calculate positions after container's rotation\n                        if(rotation !== 0) {\n                            let vector = new Phaser.Geom.Line(container.x, container.y, intersection.x * container.scaleX + offset.x, intersection.y * container.scaleY + offset.y);\n                            Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n                            points.push(vector.getPointB());\n                        }\n                        //if rotation === 0\n                        else\n                            points.push(new Phaser.Geom.Point(intersection.x * container.scaleX + offset.x, intersection.y * container.scaleX + offset.y));\n                    }\n                }\n            }\n        }\n    }\n\n    this._points = points;\n    this._segments = segments;\n\n    return this;\n};\n\n/**\n* Update container's child map of points and segments.\n*\n* @method Raycaster.Map#container._updateChildMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.10.3\n*\n* @param {object} [child] - Container's child object.\n* @param {Phaser.Geom.Point[]} [points] - Container's mapped points.\n* @param {Phaser.Geom.Line[]} [segments] - Container's mapped segments.\n* @param {number} [rotation] - Container's rotation.\n* @param {Phaser.Geom.Point} [offset] - Container's offset.\n*/\nexport function _updateChildMap(child, points, segments, rotation, offset) {\n    if(!child.data)\n        child.setDataEnabled();\n\n    //if object is not supported\n    if(child.data.get('raycasterMapNotSupported'))\n        return;\n\n    //get child map\n    let map = child.data.get('raycasterMap');\n    if(!map) {\n        map = new this.constructor({\n            object: child,\n            segmentCount: this.segmentCount\n        });\n\n        if(map.notSupported) {\n            map.destroy();\n            child.data.set('raycasterMapNotSupported', true);\n            return;\n        }\n\n        child.data.set('raycasterMap', map);\n    }\n    else\n        map.updateMap();\n\n    //add child points\n    let childPoints = [];\n    for(let point of map.getPoints(false, true)) {\n        //calculate positions after container's rotation\n        if(rotation !== 0) {\n            let vector = new Phaser.Geom.Line(this.object.x, this.object.y, point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y);\n            Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n            points.push(vector.getPointB());\n        }\n        //if rotation === 0\n        else\n            points.push(new Phaser.Geom.Point(point.x * this.object.scaleX + offset.x, point.y * this.object.scaleX + offset.y));\n\n        childPoints.push(points[points.length - 1])\n    }\n\n    //add child segments\n    for(let segment of map.getSegments()) {\n        //calculate positions after container's rotation\n        if(rotation !== 0) {\n            let pointA = segment.getPointA();\n            let pointB = segment.getPointB();\n            let vectorA = new Phaser.Geom.Line(this.object.x, this.object.y, pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y);\n            let vectorB = new Phaser.Geom.Line(this.object.x, this.object.y, pointB.x * this.object.scaleX + offset.x, pointB.y * this.object.scaleY + offset.y);\n            Phaser.Geom.Line.SetToAngle(vectorA, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorA) + rotation, Phaser.Geom.Line.Length(vectorA));\n            Phaser.Geom.Line.SetToAngle(vectorB, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorB) + rotation, Phaser.Geom.Line.Length(vectorB));\n\n            segments.push(new Phaser.Geom.Line(vectorA.getPointB().x, vectorA.getPointB().y, vectorB.getPointB().x, vectorB.getPointB().y));\n        }\n        //if rotation === 0\n        else\n            segments.push(new Phaser.Geom.Line(segment.getPointA().x * this.object.scaleX + offset.x, segment.getPointA().y * this.object.scaleY + offset.y, segment.getPointB().x * this.object.scaleX + offset.x, segment.getPointB().y * this.object.scaleY + offset.y));\n    }\n\n    //if child's map is a circle and this.segmentsCount == 0, store transformed circles in this._circles array.\n    if(map.type == 'Arc' && this.segmentCount == 0) {\n        let circleOffset = new Phaser.Geom.Point();\n        circleOffset.x = (map.object.x - map.object.displayWidth * (map.object.originX - 0.5)) * this.object.scaleX + offset.x;\n        circleOffset.y = (map.object.y - map.object.displayHeight * (map.object.originY - 0.5))  * this.object.scaleY + offset.y;\n\n        if(rotation !== 0) {\n            let vector = new Phaser.Geom.Line(this.object.x, this.object.y, circleOffset.x, circleOffset.y)\n            Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n            circleOffset = vector.getPointB();\n        }\n\n        this._circles.push(new Phaser.Geom.Circle(circleOffset.x, circleOffset.y, map.object.radius * map.object.scaleX * this.object.scaleX));\n    }\n    else if(map.type === 'Container') {\n        for(let childMapCircle of map._circles) {\n            let circleOffset = new Phaser.Geom.Point();\n                circleOffset.x = childMapCircle.x * this.object.scaleX + offset.x;\n                circleOffset.y = childMapCircle.y * this.object.scaleY + offset.y;\n\n            if(rotation !== 0) {\n                let vector = new Phaser.Geom.Line(this.object.x, this.object.y, circleOffset.x, circleOffset.y)\n                Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n                circleOffset = vector.getPointB();\n            }\n\n            this._circles.push(new Phaser.Geom.Circle(circleOffset.x, circleOffset.y, childMapCircle.radius * this.object.scaleX));\n        }\n    }\n}\n","/**\n * @classdesc\n *\n * Map class responsible for mapping game objects.\n *\n * @namespace Raycaster.Map\n * @class Raycaster.Map\n * @constructor\n * @since 0.6.0\n *\n * @param {object} options - Map specific configuration settings.\n * @param {Raycaster} [raycaster] - Parent raycaster object.\n */\nexport function Map(options, raycaster) {\n    /**\n    * Reference to parent Raycaster object.\n    *\n    * @name Raycaster.Map#_raycaster\n    * @type {Raycaster}\n    * @private\n    * @since 0.9.0\n    */\n    this._raycaster = raycaster ? raycaster : false;\n    /**\n    * Mapped object's type\n    *\n    * @name Raycaster.Map#type\n    * @type {string}\n    * @readonly\n    * @since 0.6.0\n    */\n    this.type;\n    /**\n    * If set true, map will be tested by ray. Otherwise it will be ignored.\n    *\n    * @name Raycaster.Map#active\n    * @type {boolean}\n    * @default true\n    * @since 0.7.2\n    */\n    this.active;\n    /**\n    * If set true, map will be automatically updated on scene update event.\n    *\n    * @name Raycaster.Map_dynamic\n    * @type {boolean}\n    * @default false\n    * @since 0.6.0\n    */\n    this._dynamic = false;\n    /**\n    * If set true, map will be treated by ray as circle. Set automaticalyy on map update.\n    *\n    * @name Raycaster.Map#circle\n    * @type {boolean}\n    * @default false\n    * @since 0.9.0\n    */\n    this.circle = false;\n    /**\n    * Reference to mapped object.\n    *\n    * @name Raycaster.Map#object\n    * @type {object}\n    * @readonly\n    * @since 0.6.0\n    */\n    this.object;\n    /**\n    * Array of mapped object's vertices used as rays targets.\n    *\n    * @name Raycaster.Map#_points\n    * @type {array}\n    * @private\n    * @since 0.6.0\n    */\n    this._points = [];\n    /**\n    * Array of mapped object's segments used to test object's intersection with ray.\n    *\n    * @name Raycaster.Map#_segments\n    * @type {array}\n    * @private\n    * @since 0.6.0\n    */\n    this._segments = [];\n    /**\n    * Get array of mapped object's vertices used as rays targets.\n    *\n    * @method Raycaster.Map#getPoints\n    * @memberof Raycaster.Map\n    * @instance\n    * @since 0.6.0\n    *\n    * @param {Raycaster.Ray} [ray] - {@link Raycaster.Ray Raycaster.Ray} object used in some some types of maps.\n    *\n    * @return {Phaser.Geom.Point[]} Array of mapped object's vertices.\n    */\n    this.getPoints;\n    /**\n    * Get array of mapped object's segments used to test object's intersection with ray.\n    *\n    * @method Raycaster.Map#getSegments\n    * @memberof Raycaster.Map\n    * @instance\n    * @since 0.6.0\n    *\n    * @param {Raycaster.Ray} [ray] - {@link Raycaster.Ray Raycaster.Ray} object used in some some types of maps.\n    *\n    * @return {Phaser.Geom.Line[]} Array of mapped object's segments.\n    */\n    this.getSegments;\n    /**\n    * Get mapped object's bounding box.\n    *\n    * @method Raycaster.Map#getBoundingBox\n    * @memberof Raycaster.Map\n    * @instance\n    * @since 0.9.0\n    *\n    * @return {Phaser.Geom.Rectangle} Mapped object's bounding box.\n    */\n    this.getBoundingBox;\n    /**\n    * Update object's map of points and segments.\n    *\n    * @method Raycaster.Map#updateMap\n    * @memberof Raycaster.Map\n    * @instance\n    * @since 0.6.0\n    *\n    * @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n    */\n    this.updateMap;\n\n    this.config(options);\n    if(!this.notSupported)\n        this.updateMap();\n\n    return this;\n};\n\nMap.prototype = {\n    config: require('./config.js').config,\n    destroy: require('./destroy.js').destroy,\n    get dynamic() {\n        return this._dynamic;\n    },\n    set dynamic(dynamic) {\n        if(this._dynamic == dynamic)\n            return this;\n    \n        if(dynamic) {\n            this._dynamic = true;\n            \n            //add object to raycaster's dynamic objects list\n            if(this._raycaster) {\n                this._raycaster.dynamicMappedObjects.push(this.object);\n    \n                this._raycaster._stats.mappedObjects.dynamic = this._raycaster.dynamicMappedObjects.length;\n                this._raycaster._stats.mappedObjects.static = this._raycaster._stats.mappedObjects.total - this._raycaster._stats.mappedObjects.dynamic;\n            }\n        }\n        else {\n            this._dynamic = false;\n            \n            //remove object from reycasters' dynamic objects list\n            if(this._raycaster) {\n                let index = this._raycaster.dynamicMappedObjects.indexOf(this.object);\n                if(index >= 0)\n                    this._raycaster.dynamicMappedObjects.splice(index, 1);\n    \n                this._raycaster._stats.mappedObjects.dynamic = this._raycaster.dynamicMappedObjects.length;\n                this._raycaster._stats.mappedObjects.static = this._raycaster._stats.mappedObjects.total - this._raycaster._stats.mappedObjects.dynamic;\n            }\n        }\n    \n        return this;\n     }\n};\n\nMap.prototype.constructor = Map;\n","/*Map methods for lines*/\n/**\n* Get array of mapped line's vertices used as rays targets.\n*\n* @method Raycaster.Map#line.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @param {Raycaster.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n    return this._points;\n};\n\n/**\n* Get array of mapped line's segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#line.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n    return this._segments;\n};\n\n/**\n* Update line's map of points and segments.\n*\n* @method Raycaster.Map#line.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    let points = [];\n    let segments = [];\n    \n    //calculate offset based on object position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\n    let pointA = this.object.geom.getPointA();\n    let pointB = this.object.geom.getPointB();\n\n    //calculate positions after object's rotation\n    let rotation = this.object.rotation;\n    if(rotation !== 0) {\n        let vectorA = new Phaser.Geom.Line(this.object.x, this.object.y, pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y);\n        Phaser.Geom.Line.SetToAngle(vectorA, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorA) + rotation, Phaser.Geom.Line.Length(vectorA));\n        pointA = vectorA.getPointB();\n\n        let vectorB = new Phaser.Geom.Line(this.object.x, this.object.y, pointB.x * this.object.scaleX + offset.x, pointB.y * this.object.scaleY + offset.y);\n        Phaser.Geom.Line.SetToAngle(vectorB, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorB) + rotation, Phaser.Geom.Line.Length(vectorB));\n        pointB = vectorB.getPointB();\n\n        //set points\n        points.push(new Phaser.Geom.Point(pointA.x, pointA.y));\n        points.push(new Phaser.Geom.Point(pointB.x, pointB.y));\n        //set segment\n        segments.push(new Phaser.Geom.Line(pointA.x, pointA.y, pointB.x, pointB.y));\n    }\n    //if rotation === 0\n    else {\n        //set points\n        points.push(new Phaser.Geom.Point(pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y));\n        points.push(new Phaser.Geom.Point(pointB.x * this.object.scaleX + offset.x, pointB.y * this.object.scaleY + offset.y));\n        //set segment\n        segments.push(new Phaser.Geom.Line(pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y, pointB.x + offset.x * this.object.scaleX, pointB.y * this.object.scaleY + offset.y));\n    }\n    \n\n    this._points = points;\n    this._segments = segments;\n    return this;\n};\n","/*Map methods for matter body*/\n/**\n* Get array of mapped matter body's vertices used as rays targets.\n*\n* @method Raycaster.Map#matterBody.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.9.0\n*\n* @param {Raycaster.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n\n    let body = this.object.type === 'body' || this.object.type === 'composite' ? this.object : this.object.body;\n\n    //calculate tangent rays\n    if(ray && !this.forceVerticesMapping && body.circleRadius > 0) {\n        let points = [];\n        let rayA = new Phaser.Geom.Line();\n        let rayB = new Phaser.Geom.Line();\n        let c = new Phaser.Geom.Line(ray.origin.x, ray.origin.y, body.position.x, body.position.y);\n\n        let rayLength = Math.sqrt(Math.pow(Phaser.Geom.Line.Length(c), 2) - Math.pow(body.circleRadius * body.scale.x, 2));\n\n        //ray angle\n        let angle = Phaser.Geom.Line.Angle(c);\n        let dAngle = Math.asin((body.circleRadius * body.scale.x) / Phaser.Geom.Line.Length(c));\n        Phaser.Geom.Line.SetToAngle(rayA, ray.origin.x, ray.origin.y, angle - dAngle, rayLength);\n        Phaser.Geom.Line.SetToAngle(rayB, ray.origin.x, ray.origin.y, angle + dAngle, rayLength);\n\n        //adding tangent points\n        points.push(rayA.getPointB());\n        points.push(rayB.getPointB());\n\n        return points;\n    }\n\n    return this._points;\n};\n\n/**\n* Get array of mapped matter body's segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#matterBody.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.9.0\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n    return this._segments;\n};\n\n/**\n* Update matter body's map of points and segments.\n*\n* @method Raycaster.Map#matterBody.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.9.0\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    let points = [];\n    let segments = [];\n    let body = this.object.type === 'body' || this.object.type === 'composite' ? this.object : this.object.body;\n    let bodies = [body];\n    let generateBounds = false;\n\n    if(body.circleRadius > 0 && !this.forceVerticesMapping) {\n        this.circle = true;\n        this._points = points;\n        this._segments = segments;\n\n        return this;\n    }\n\n    this.circle = false;\n\n    if(body.type == 'composite')\n        bodies = body.bodies;\n\n    if( ( body.bounds === undefined && body.type == 'composite' ) || ( body.type == 'composite' && this.dynamic ) ) {\n        generateBounds = true;\n    }\n    \n    for(let bodyItem of bodies) {\n        //if convex body\n        if(bodyItem.parts.length === 1 || this.forceConvex) {\n            let vertices = bodyItem.parts[0].vertices;\n\n            points.push(new Phaser.Geom.Point(vertices[0].x, vertices[0].y));\n\n            for(let i = 1, length = vertices.length; i < length; i++) {\n                let pointA = new Phaser.Geom.Point(vertices[i - 1].x, vertices[i - 1].y);\n                let pointB = new Phaser.Geom.Point(vertices[i].x, vertices[i].y);\n\n                points.push(pointB);\n\n                //add segment\n                let segment = new Phaser.Geom.Line(pointA.x, pointA.y, pointB.x, pointB.y);\n                segments.push(segment);\n            }\n\n            //closing segment\n            let segment = new Phaser.Geom.Line(vertices[vertices.length - 1].x, vertices[vertices.length - 1].y, vertices[0].x, vertices[0].y);\n            segments.push(segment);\n        }\n\n        //if concave body\n        else if(bodyItem.parts.length > 1) {\n            for(let i = 1, length = bodyItem.parts.length; i < length; i++) {\n                let vertices = bodyItem.parts[i].vertices;\n                let pointA = new Phaser.Geom.Point(vertices[0].x, vertices[0].y);\n\n                if(points.find(point => point.x == pointA.x && point.y == pointA.y) === undefined)\n                    points.push(pointA);\n\n                for(let j = 1, length = vertices.length; j < length; j++) {\n                    let pointB = new Phaser.Geom.Point(vertices[j].x, vertices[j].y);\n                    //check if segment was already added\n                    let segmentIndex = segments.findIndex(segment => (segment.x1 == pointA.x && segment.y1 == pointA.y && segment.x2 == pointB.x && segment.y2 == pointB.y) || (segment.x1 == pointB.x && segment.y1 == pointB.y && segment.x2 == pointA.x && segment.y2 == pointA.y));\n                    \n                    if(segmentIndex !== -1) {\n                        segments.splice(segmentIndex, 1);\n                        pointA = pointB;\n                        continue;\n                    }\n                    \n                    if(points.find(point => point.x == pointB.x && point.y == pointB.y) === undefined)\n                        points.push(pointB);\n\n                    //add segment\n                    let segment = new Phaser.Geom.Line(pointA.x, pointA.y, pointB.x, pointB.y);\n                    segments.push(segment);\n                    \n                    pointA = pointB;\n                }\n                \n                //closing segment\n                let closingSegment = new Phaser.Geom.Line(vertices[vertices.length - 1].x, vertices[vertices.length - 1].y, vertices[0].x, vertices[0].y);\n\n                let segmentIndex = segments.findIndex(segment => (segment.x1 == closingSegment.x1 && segment.y1 == closingSegment.y1 && segment.x2 == closingSegment.x2 && segment.y2 == closingSegment.y2) || (segment.x1 == closingSegment.x2 && segment.y1 == closingSegment.y2 && segment.x2 == closingSegment.x1 && segment.y2 == closingSegment.y1));\n                if(segmentIndex === undefined)\n                    segments.push(closingSegment);\n            }\n        }\n    }\n\n    this._points = points;\n    this._segments = segments;\n\n    if(generateBounds) {\n        let bounds = this._raycaster.scene.matter.composite.bounds(body);\n        body.bounds = bounds;\n    }\n\n    return this;\n};\n\n/**\n* Get matter body's bounding box.\n*\n* @method Raycaster.Map#matterBody.getBoundingBox\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.9.0\n*\n* @return {Phaser.Geom.Rectangle} - Matter body's bounding box.\n*/\nexport function getBoundingBox() {\n    let bounds = this.object.type === 'body' || this.object.type === 'composite' ? this.object.bounds : this.object.body.bounds;\n\n    return new Phaser.Geom.Rectangle(bounds.min.x, bounds.min.y, bounds.max.x - bounds.min.x, bounds.max.y - bounds.min.y);\n}\n\n","/*Map methods for polygons*/\n/**\n* Get array of mapped polygon's vertices used as rays targets.\n*\n* @method Raycaster.Map#polygon.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @param {Raycaster.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n    return this._points;\n};\n\n/**\n* Get array of mapped polygon's segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#polygon.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n    return this._segments;\n};\n\n/**\n* Update polygon's map of points and segments.\n*\n* @method Raycaster.Map#polygon.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    let points = [];\n    let segments = [];\n    \n    //calculate offset based on object position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\n    //set points\n    //calculate positions after object's rotation\n    let rotation = this.object.rotation;\n    if(rotation !== 0) {\n        for(let point of this.object.geom.points) {\n            let vector = new Phaser.Geom.Line(this.object.x, this.object.y, point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y);\n            Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n            points.push(vector.getPointB());\n        }\n    }\n    //if rotation === 0\n    else {\n        for(let point of this.object.geom.points) {\n            points.push(new Phaser.Geom.Point(point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y));\n        }\n    }\n\n    //set segments\n    for(let i = 0, length = points.length; i < length; i++) {\n        if(i+1 < length)\n            segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));   \n    }\n    //if polygon is closed\n    if(this.object.closePath) {\n        let last = points.length - 1;\n        segments.push(new Phaser.Geom.Line(points[last].x, points[last].y, points[0].x, points[0].y));\n    }\n\n    this._points = points;\n    this._segments = segments;\n\n    return this;\n};\n","/*Map methods for rectangles*/\n/**\n* Get array of mapped rectangle's vertices used as rays targets.\n*\n* @method Raycaster.Map#rectangle.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @param {Raycaster.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n    return this._points;\n};\n\n/**\n* Get array of mapped rectangle's segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#rectangle.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n    return this._segments;\n};\n\n/**\n* Update rectangle's map of points and segments.\n*\n* @method Raycaster.Map#rectangle.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n        \n    let points = [];\n    let segments = [];\n\n    //set points\n    points = [\n        this.object.getTopLeft(),\n        this.object.getTopRight(),\n        this.object.getBottomRight(),\n        this.object.getBottomLeft()\n    ];\n\n    //set segments\n    for(let i = 0, length = points.length; i < length; i++) {\n        let prevPoint = i > 0 ? points[i - 1] : points.slice(-1),\n            nextPoint = i < length - 1 ? points[i + 1] : points[0];\n\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, nextPoint.x, nextPoint.y));\n        points[i].intersection = new Phaser.Geom.Line(prevPoint.x, prevPoint.y, nextPoint.x, nextPoint.y);\n\n\n        /*\n        if(i+1 < length) {\n            segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));\n        }\n        else {\n            segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[0].x, points[0].y));\n        }\n        */\n    }\n\n    this._points = points;\n    this._segments = segments;\n\n    return this;\n};\n","/*Map methods for tilemaps*/\n/**\n* Get array of mapped tilemap's vertices used as rays targets.\n*\n* @method Raycaster.Map#tilemap.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.3\n*\n* @param {Raycaster.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n    if(!ray || ray && (ray.detectionRange == 0 || ray.detectionRange >= Phaser.Math.MAX_SAFE_INTEGER))\n        return this._points;\n\n    let points = [];\n    for(let point of this._points) {\n        if(Phaser.Math.Distance.Between(ray.origin.x, ray.origin.y, point.x, point.y) <= ray.detectionRange)\n            points.push(point);\n    }\n\n    //get intersections between tilemap's segments and ray's detection range edge\n    let segments = this.getSegments(ray);\n\n    for(let segment of segments) {\n        if(Phaser.Math.Distance.Between(ray.origin.x, ray.origin.y, segment.x1, segment.y1) > ray.detectionRange)\n            points.push(new Phaser.Geom.Point(segment.x1, segment.y1));\n        \n        if(Phaser.Math.Distance.Between(ray.origin.x, ray.origin.y, segment.x2, segment.y2) > ray.detectionRange)\n            points.push(new Phaser.Geom.Point(segment.x2, segment.y2));\n    }\n\n    return points;\n};\n\n/**\n* Get array of mapped tilemap's segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#tilemap.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.3\n*\n* @param {Raycaster.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments(ray = false) {\n    if(!this.active)\n        return [];\n    if(!ray || ray && (ray.detectionRange == 0 || ray.detectionRange >= Phaser.Math.MAX_SAFE_INTEGER))\n        return this._segments;\n\n    let segments = [];\n    for(let segment of this._segments) {\n        if(Phaser.Geom.Intersects.LineToCircle(segment, ray.detectionRangeCircle)) {\n            segments.push(segment);\n        }\n    }\n\n    return segments;\n};\n\n/**\n* Update tilemap's map of points and segments.\n*\n* @method Raycaster.Map#tilemap.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.3\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    let points = [];\n    let segments = [];\n    \n    //calculate offset based on object position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x;\n    offset.y = this.object.y;\n\n    let horizontal = false;\n    let horizontals = [];\n    let verticals = [];\n\n    //iterate rows\n    for(let i = 0, iLength = this.object.layer.data.length; i < iLength; i++) {\n        let row = this.object.layer.data[i];\n\n        //iterate row's tiles\n        for(let j = 0, jLength = row.length; j < jLength; j++) {\n            let tile = row[j];\n\n            //check if tile and its top and left neighbours have different are from different sets (rays blocking and non-bloking)\n            let upperEdge = ((i > 0 && this.collisionTiles.includes(this.object.layer.data[i-1][j].index) != this.collisionTiles.includes(tile.index)) || (i == 0 && this.collisionTiles.includes(tile.index))) ? true : false;\n            let leftEdge = ((j > 0 && this.collisionTiles.includes(this.object.layer.data[i][j-1].index) != this.collisionTiles.includes(tile.index)) || (j == 0 && this.collisionTiles.includes(tile.index))) ? true : false;\n\n            //get current tile's column last vertical line\n            let vertical = false;\n            if(verticals.length <= j)\n                verticals[j] = [];\n            else if(verticals[j].length > 0)\n                vertical = verticals[j][verticals[j].length - 1];\n\n            //check if tile has edge from left\n            if(leftEdge) {\n                if(vertical && vertical.y + vertical.height == i)\n                    vertical.height++;\n                else {\n                    verticals[j].push({\n                        x: tile.x,\n                        y: tile.y,\n                        height: 1\n                    });\n                }\n            }\n\n            //check if tile has edge from top\n            if(upperEdge) {\n                if(horizontal)\n                    horizontal.width++;\n                else\n                    horizontal = {\n                        x: tile.x,\n                        y: tile.y,\n                        width: 1\n                    };\n                continue;\n            }\n\n            if(horizontal) {\n                let x = horizontal.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n                let y = horizontal.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n                let segment = new Phaser.Geom.Line(x, y, x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y);\n                segments.push(segment);\n                horizontals.push(segment);\n                points.push(new Phaser.Geom.Point(x, y));\n                points.push(new Phaser.Geom.Point(x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y));\n                horizontal = false;\n            }\n        }\n        \n        //at the end of row add segment if exist\n        if(horizontal) {\n            let x = horizontal.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n            let y = horizontal.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n            let segment = new Phaser.Geom.Line(x, y, x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y);\n            segments.push(segment);\n            horizontals.push(segment);\n            points.push(new Phaser.Geom.Point(x, y));\n            points.push(new Phaser.Geom.Point(x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y));\n            horizontal = false;\n        }\n    }\n\n    //add bottom horizontal segments\n    for(let tile of this.object.layer.data[this.object.layer.data.length - 1]) {\n        if(this.collisionTiles.includes(tile.index)) {\n            if(horizontal)\n                horizontal.width++;\n            else\n                horizontal = {\n                    x: tile.x,\n                    y: tile.y + 1,\n                    width: 1\n                };\n            continue;\n        }\n\n        if(horizontal) {\n            let x = horizontal.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n            let y = horizontal.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n            let segment = new Phaser.Geom.Line(x, y, x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y);\n            segments.push(segment);\n            horizontals.push(segment);\n            points.push(new Phaser.Geom.Point(x, y));\n            points.push(new Phaser.Geom.Point(x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y));\n            horizontal = false;\n        }\n    }\n\n    //add segment if exist\n    if(horizontal) {\n        let x = horizontal.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n        let y = horizontal.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n        let segment = new Phaser.Geom.Line(x, y, x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y);\n        segments.push(segment);\n        horizontals.push(segment);\n        points.push(new Phaser.Geom.Point(x, y));\n        points.push(new Phaser.Geom.Point(x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y));\n        horizontal = false;\n    }\n    \n    //add right vertical segments\n    let vertical = false;\n    let verticalsLastColumn = [];\n    for(let row of this.object.layer.data) {\n        let tile = row[row.length - 1];\n\n        //if tile blocks ray\n        if(this.collisionTiles.includes(tile.index)) {\n            if(vertical) {\n                vertical.height++;\n            }\n            else {\n                vertical = {\n                    x: tile.x + 1,\n                    y: tile.y,\n                    height: 1\n                };\n            }\n\n            continue;\n        }\n\n        if(vertical) {\n            verticalsLastColumn.push(vertical);\n            vertical = false;\n        }\n    }\n\n    verticals.push(verticalsLastColumn);\n    \n    //add vertical segments\n    for(let column of verticals) {\n        if(!column)\n            continue;\n\n        for(let vertical of column) {\n            let x = vertical.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n            let y1 = vertical.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n            let y2 = y1 + this.object.layer.tileHeight * this.object.scaleY * vertical.height;\n            let segment = new Phaser.Geom.Line(x, y1, x, y2)\n            segments.push(segment);\n\n            //add points if they're not already there\n            if(!points.filter(point => point.x == x && point.y == y1))\n                points.push(new Phaser.Geom.Point(x, y));\n\n            if(!points.filter(point => point.x == x && point.y == y2))\n                points.push(new Phaser.Geom.Point(x, y));\n\n            //get intersections between horizontal segments and vertical\n            for(let horizontalSegment of horizontals) {\n                if(segment.x1 == horizontalSegment.x1 || segment.x1 == horizontalSegment.x2 || segment.x2 == horizontalSegment.x1 || segment.x2 == horizontalSegment.x2)\n                    continue;\n\n                if(segment.y1 == horizontalSegment.y1 || segment.y1 == horizontalSegment.y2 || segment.y2 == horizontalSegment.y1 || segment.y2 == horizontalSegment.y2)\n                    continue;\n\n                let point = new Phaser.Geom.Point();\n                if(Phaser.Geom.Intersects.LineToLine(segment, horizontalSegment, point)) {\n                    points.push(point);\n                }\n            }\n        }\n    }\n\n    this._points = points;\n    this._segments = segments;\n    return this;\n};\n\n/**\n* Set tile types which should be mapped (for Phaser.Tilemaps.StaticTilemapLayer and Phaser.Tilemaps.DynamicTilemapLayer maps only).\n*\n* @method Raycaster.Map#setCollisionTiles\n* @memberof Raycaster.Map\n* @instance\n* @since 0.7.3\n*\n* @param {array} [tiles = []] - Set of tile's indexes to map.\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function setCollisionTiles(tiles = []) {\n    this.collisionTiles = tiles;\n    return this;\n}\n","/**\n * Set segment count for cirle's map.\n * If set to 0, map won't be generating segments and relay only on tangent points calculated for currently testing ray.\n *\n * @method Raycaster.Map#setSegmentCount\n * @memberof Raycaster.Map\n * @instance\n * @since 0.6.0\n *\n * @param {number} count - Circle map's segment count.\n *\n * @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n */\nexport function setSegmentCount(count) {\n    this.segmentCount = count;\n    this.circle = count ? false : true;\n\n    this.updateMap();\n    return this;\n}\n","/**\n * Set ray's angle (direction) in radians.\n *\n * @method Raycaster.Ray#setAngle\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {number} [angle = 0] - Ray's angle in radians.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setAngle(angle = 0) {\n    this.angle = Phaser.Math.Angle.Normalize(angle);\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    return this;\n}\n\n/**\n * Set ray's angle (direction) in degrees.\n *\n * @method Raycaster.Ray#setAngleDeg\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.1\n *\n * @param {number} [angle = 0] - Ray's angle in degrees.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setAngleDeg(angle = 0) {\n    this.angle = Phaser.Math.Angle.Normalize(Phaser.Math.DegToRad(angle));\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    return this;\n}\n","/**\n * Cast ray to find closest intersection with tested mapped objects.\n *\n * @method Raycaster.Ray#cast\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {object} [options] - options that may include:\n * @param {object[]} [options.objects = {Raycaster#mappedObjects}] - Array of game objects to test. If not provided test all mapped game objects.\n * @param {Phaser.Geom.Point|Point} [options.target] - Ray's target point. Used in other casting methods to determine if ray was targeting mapped objects point.\n * @param {boolean} [options.internal = false] - Flag determining if method is used by other casting method.\n *\n * @return {(Phaser.Geom.Point|boolean)} Ray's closest intersection with tested objects. Returns false if no intersection has been found. Additionally contains reference to hit mapped object and segment if available.\n */\nexport function cast(options = {}) {\n    let closestIntersection;\n    let closestSegment;\n    let closestObject;\n    let closestDistance = this.rayRange;\n    let internal = options.internal ? options.internal : false;\n    let startTime = performance.now();\n    let stats = {\n        method: 'cast',\n        rays: 1,\n        testedMappedObjects: 0,\n        hitMappedObjects: 0,\n        segments: 0,\n        time: 0\n    };\n\n    //if bounding box is defined check bounding box intersection\n    if(this._raycaster && this._raycaster.boundingBox) {\n        let intersections = [];\n        Phaser.Geom.Intersects.GetLineToRectangle(this._ray, this._raycaster.boundingBox.rectangle, intersections);\n        if(intersections.length === 1)\n            closestIntersection = intersections[0];\n        else if(intersections.length > 1) {\n            for(let intersection of intersections) {\n                let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, intersection.x, intersection.y);\n                if(distance < closestDistance) {\n                    closestDistance = distance;\n                    closestIntersection = intersection;\n                }\n            }\n        }\n        //if ray target is declared\n        else if(options.target){\n            let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, options.target.x, options.target.y);\n            //if target is within ray range\n            if(this.rayRange > distance) {\n                closestDistance = distance;\n                closestIntersection = options.target;\n            }\n        }\n    }\n\n    //if no objects to cast ray were passed, use raycasters mapped objects\n    if(!options.objects) {\n        if(this._raycaster)\n            options.objects = this._raycaster.mappedObjects;\n        else\n            return intersections;\n    }\n    \n    for(let object of options.objects) {\n        let map, boundingBox, boundingBoxIntersections = [], canTestMap = false;\n        \n        if(object.type === 'body' || object.type === 'composite')\n            map = object.raycasterMap;\n        else\n            map = object.data.get('raycasterMap');\n\n        stats.testedMappedObjects++;\n\n        //get slightly enlarged bounding box due to fridge cases, when ray \"glanced\" border box's corner (v0.10.1)\n        if(internal) {\n            boundingBox = map._boundingBox;\n        }\n        else {\n            boundingBox = map.getBoundingBox();\n            boundingBox.setTo(boundingBox.x - 0.1, boundingBox.y - 0.1, boundingBox.width + 0.2, boundingBox.height + 0.2);\n        }\n\n        //check if object is intersected by ray\n        if(Phaser.Geom.Intersects.GetLineToRectangle(this._ray, boundingBox, boundingBoxIntersections).length === 0)\n            continue;\n\n        //check if bounding box is closer than closest intersection\n        for(let boundingBoxIntersection of boundingBoxIntersections) {\n            if(Phaser.Math.Distance.Between(this.origin.x, this.origin.y, boundingBoxIntersection.x, boundingBoxIntersection.y) < closestDistance) {\n                canTestMap = true;\n                break;\n            }\n        }\n\n        if(!canTestMap)\n            continue;\n\n        stats.hitMappedObjects++;\n        stats.segments += map.getSegments(this).length;\n        \n        //check intersections\n        for(let segment of map.getSegments(this)) {\n            let intersection = [];\n\n            //if target point is segmemt point\n            if(options.target) {\n                if(\n                    Phaser.Geom.Point.Equals(options.target, segment.getPointA())\n                    || Phaser.Geom.Point.Equals(options.target, segment.getPointB())\n                ) {\n                    intersection = options.target;\n                }\n                else if(!Phaser.Geom.Intersects.LineToLine(this._ray, segment, intersection))\n                    continue;\n            }\n            //if no intersection continue\n            else if(!Phaser.Geom.Intersects.LineToLine(this._ray, segment, intersection))\n              continue;\n            \n            //get closest intersection\n            let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, intersection.x, intersection.y);\n            if(distance < closestDistance) {\n                closestDistance = distance;\n                closestIntersection = intersection;\n                closestObject = map.object;\n                closestSegment = segment;\n            }\n        }\n\n        //check if map is circular\n        if(map.circle) {\n           //if circular map has generated points (besides tangent points to ray)\n            if(map._points.length > 0) {\n                continue;\n            }\n            \n            //check if target point is a circle tangent point to ray\n            if(options.target) {\n                let points = map.getPoints(this);\n                let isTangent = false;\n                for(let point of points) {\n                    if(Phaser.Geom.Point.Equals(options.target, point)) {\n                        //get closest intersection\n                        let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, point.x, point.y);\n\n                        if(distance < closestDistance) {\n                            closestDistance = distance;\n                            closestIntersection = point;\n                            closestObject = map.object;\n                            isTangent = true;\n                            break;\n                        }\n                    }\n                }\n\n                if(isTangent)\n                    continue;\n            }\n\n            let circleIntersections = [];\n            let offset = new Phaser.Geom.Point();\n            offset.x = map.object.x - map.object.displayWidth * (map.object.originX - 0.5);\n            offset.y = map.object.y - map.object.displayHeight * (map.object.originY - 0.5);\n\n            //calculate circle's center after rotation\n            let rotation = map.object.rotation;\n            if(rotation !== 0) {\n                let vector = new Phaser.Geom.Line(map.object.x, map.object.y, offset.x, offset.y);\n                Phaser.Geom.Line.SetToAngle(vector, map.object.x, map.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n                let cB = vector.getPointB();\n                offset.x = cB.x;\n                offset.y = cB.y;\n            }\n\n            //create transformed circle\n            let circle = new Phaser.Geom.Circle(offset.x, offset.y, map.object.radius * map.object.scaleX);\n\n            if(Phaser.Geom.Intersects.GetLineToCircle(this._ray, circle, circleIntersections)) {\n                for(let intersection of circleIntersections) {\n                    //get closest intersection\n                    let distance = Phaser.Math.Distance.Between(this._ray.x1, this._ray.y1, intersection.x, intersection.y);\n\n                    if(distance < closestDistance) {\n\n                        closestDistance = distance;\n                        closestIntersection = intersection;\n                        closestObject = map.object;\n                    }\n                }\n            }\n        }\n\n        //check container map's circles\n        if(map.type == 'Container' && map._circles.length > 0) {\n            for(let circle of map._circles) {\n                //check if target point is a circle tangent point to ray\n                if(options.target) {\n                    let isTangent = false;\n\n                    for(let point of circle.points) {\n                        if(Phaser.Geom.Point.Equals(options.target, point)) {\n                            //get closest intersection\n                            let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, point.x, point.y);\n\n                            if(distance < closestDistance) {\n                                closestDistance = distance;\n                                closestIntersection = point;\n                                closestObject = map.object;\n                                isTangent = true;\n                                break;\n                            }\n                        }\n                    }\n\n                    if(isTangent)\n                        continue;\n                }\n\n                let circleIntersections = [];\n\n                if(Phaser.Geom.Intersects.GetLineToCircle(this._ray, circle, circleIntersections)) {\n                    for(let intersection of circleIntersections) {\n                        //get closest intersection\n                        let distance = Phaser.Math.Distance.Between(this._ray.x1, this._ray.y1, intersection.x, intersection.y);\n\n                        if(distance < closestDistance) {\n                            closestDistance = distance;\n                            closestIntersection = intersection;\n                            closestObject = map.object;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    //update stats\n    if(internal) {\n        this._stats.rays++;\n        this._stats.testedMappedObjects += stats.testedMappedObjects;\n        this._stats.hitMappedObjects += stats.hitMappedObjects;\n        this._stats.segments += stats.segments;\n    }\n    else {\n        stats.time = performance.now() - startTime;\n        this._stats = stats;\n    }\n\n    let result;\n    if(!closestIntersection) {\n        if(this.ignoreNotIntersectedRays)\n            return false;\n\n        result = this._ray.getPointB();\n    }\n    else {\n        result = new Phaser.Geom.Point(closestIntersection.x, closestIntersection.y);\n        result.segment = closestSegment;\n        result.object = closestObject;\n    }\n\n    if(this.round) {\n        result.x = Math.round(result.x);\n        result.y = Math.round(result.y);\n    }\n\n    if(!internal)\n        this.drawDebug([result]);\n    \n    return result;\n}","/**\n * Cast ray in all directions to find closest intersections with tested mapped objects.\n *\n * @method Raycaster.Ray#castCircle\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {object} [options] - options that may include:\n * @param {object[]} [options.objects = Raycaster.mappedObjects] - Array of game objects to test. If not provided test all mapped game objects.\n *\n * @return {Phaser.Geom.Point[]} Array of points of ray's closest intersections with tested objects. Additionally each point contains reference to hit mapped object and it's segment if available.\n */\nexport function castCircle(options = {}) {\n    let originalAngle = this.angle;\n    let intersections = [];\n    let maps = [];\n    let rayTargets = [];\n    let testedObjects = [];\n    let startTime = performance.now();\n    //reset stats\n    this._stats = {\n        method: 'castCircle',\n        rays: 0,\n        testedMappedObjects: 0,\n        hitMappedObjects: 0,\n        segments: 0,\n        time: 0\n    };\n\n    //if no objects to cast ray were passed, use raycasters mapped objects\n    if(!options.objects) {\n        if(this._raycaster)\n            options.objects = this._raycaster.mappedObjects;\n        else\n            return intersections;\n    }\n\n    //if bounding box is defined add bounding box points to \n    if(this._raycaster && this._raycaster.boundingBox) {\n        for(let point of this._raycaster.boundingBox.points) {\n            rayTargets.push({\n                point: point,\n                angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y)\n            });\n        }\n    }\n\n    for(let i=0, iLength = options.objects.length; i < iLength; i++) {\n        let object = options.objects[i];\n        //if bound in range\n        if(!this.boundsInRange(object))\n            continue;\n        \n        testedObjects.push(object);\n\n        let map, boundingBox;\n        if(object.type === 'body' || object.type === 'composite')\n            map = object.raycasterMap;\n        else\n            map = object.data.get('raycasterMap');\n\n        //get slightly enlarged bounding box due to fridge cases, when ray \"glanced\" border box's corner (v0.10.1)\n        boundingBox = map.getBoundingBox();\n        boundingBox.setTo(boundingBox.x - 0.1, boundingBox.y - 0.1, boundingBox.width + 0.2, boundingBox.height + 0.2);\n\n        map._boundingBox = boundingBox;\n\n        maps.push(map);\n        //get points and angles\n        for(let point of map.getPoints(this)) {\n            rayTargets.push({\n                point: point,\n                angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y)\n            });\n        }\n\n        //get objects intersections\n        for(let j = i+1, jLength = options.objects.length; j < jLength; j++){\n            let objectB = options.objects[j];\n            let mapB;\n            if(objectB.type === 'body' || objectB.type === 'composite')\n                mapB = objectB.raycasterMap;\n            else {\n                mapB = objectB.data.get('raycasterMap');\n            }\n            //check if bounding boxes overlap\n            if(!Phaser.Geom.Intersects.RectangleToRectangle(map.getBoundingBox(), mapB.getBoundingBox()))\n                continue;\n            \n            //find objects intersections\n            for(let segmentA of map.getSegments(this)) {\n                for(let segmentB of mapB.getSegments(this)) {\n                    let intersection = [];\n                    if(!Phaser.Geom.Intersects.LineToLine(segmentA, segmentB, intersection))\n                        continue;\n                    \n                    let target = {\n                        point: new Phaser.Geom.Point(intersection.x, intersection.y),\n                        angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, intersection.x, intersection.y)\n                    };\n                    target.point.intersection = false;\n                    rayTargets.push(target);\n                }\n            }\n        }\n    }\n\n    //sort target points by angle\n    rayTargets.sort(function(a, b){\n        //if rays towards points have the same angles promote closer one\n        if(a.angle == b.angle) {\n            if(Phaser.Math.Distance.Between(this.origin.x, this.origin.y, a.point.x, a.point.y) > Phaser.Math.Distance.Between(this.origin.x, this.origin.y, b.point.x, b.point.y))\n                return 1;\n            else\n                return -1;\n        }\n\n        return a.angle - b.angle;\n    }.bind(this));\n\n    let previousTarget = {\n        angle: false\n    };\n\n    //cast rays\n    for(let target of rayTargets){\n        //if current target is the same as previous one skip loop\n        if(target.angle === previousTarget.angle) {\n            continue;\n        }\n\n        previousTarget = target;\n\n        this.setAngle(target.angle);\n        let intersection = this.cast({\n            objects: testedObjects,\n            target: target.point,\n            internal: true\n        });\n\n        if(intersection){\n            //if intersection hits target point cast two additional rays\n            let castSides = false;\n            if(this.round) {\n                let roundedTarget = new Phaser.Geom.Point(Math.round(target.point.x), Math.round(target.point.y));\n                castSides = Phaser.Geom.Point.Equals(roundedTarget, intersection)\n            }\n            else {\n                castSides = Phaser.Geom.Point.Equals(target.point, intersection);\n            }\n\n            //tmp\n            if(castSides) {\n                if(target.point.intersection === false)\n                    castSides = false;\n                else if(target.point.intersection && Phaser.Geom.Intersects.LineToLine(this._ray, target.point.intersection))\n                    castSides = false;\n            }\n            \n            if(castSides) {\n                this.setAngle(target.angle - 0.0001);\n                let intersectionA = this.cast({\n                    objects: testedObjects,\n                    internal: true\n                });\n\n                if(intersectionA) {\n                    intersections.push(intersectionA);\n                }\n\n                intersections.push(intersection);\n\n                this.setAngle(target.angle + 0.0001);\n                let intersectionB = this.cast({\n                    objects: testedObjects,\n                    internal: true\n                });\n\n                if(intersectionB) {\n                    intersections.push(intersectionB);\n                }\n\n                continue;\n            }\n\n            intersections.push(intersection);\n        }\n    }\n\n    this.setAngle(originalAngle);\n    this.intersections = intersections;\n\n    if(this.autoSlice)\n        this.slicedIntersections = this.slice();\n\n    this._stats.time = performance.now() - startTime;\n\n    this.drawDebug(intersections);\n\n    return intersections;\n}\n","/**\n * Cast ray in a cone to find closest intersections with tested mapped objects.\n *\n * @method Raycaster.Ray#castCone\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.7.0\n *\n * @param {object} [options] - options that may include:\n * @param {object[]} [options.objects = Raycaster.mappedObjects] - Array of game objects to test. If not provided test all mapped game objects.\n *\n * @return {Phaser.Geom.Point[]} Array of points of ray's closest intersections with tested objects. Additionally each point contains reference to hit mapped object and it's segment if available.\n */\nexport function castCone(options = {}) {\n    let originalAngle = this.angle;\n    let intersections = [];\n    let maps = [];\n    let rayTargets = [];\n    let testedObjects = [];\n    let cone = this.cone;\n    let minAngle = 0;\n    let maxAngle = 0;\n    let angleOffset = 0;\n    let startTime = performance.now();\n    //reset stats\n    this._stats = {\n        method: 'castCone',\n        rays: 0,\n        testedMappedObjects: 0,\n        hitMappedObjects: 0,\n        segments: 0,\n        time: 0\n    };\n\n    //set cone\n    if(options.cone !== undefined)\n        cone = options.cone;\n    if(options.coneDeg !== undefined)\n        cone = Phaser.Math.DegToRad(options.coneDeg);\n\n    //set cone min and max angle\n    minAngle = this.angle - cone / 2;\n    maxAngle = this.angle + cone / 2;\n\n    //add min and max angle points\n    this.setAngle(minAngle);\n    rayTargets.push({\n        point: this._ray.getPointB(),\n        angle: minAngle,\n        angleOffsetDeg: Phaser.Math.RadToDeg(-cone / 2)\n    });\n\n    this.setAngle(maxAngle);\n    rayTargets.push({\n        point: this._ray.getPointB(),\n        angle: maxAngle,\n        angleOffsetDeg: Phaser.Math.RadToDeg(cone / 2)\n    });\n\n    //if no objects to cast ray were passed, use raycasters mapped objects\n    if(!options.objects) {\n        if(this._raycaster)\n            options.objects = this._raycaster.mappedObjects;\n        else\n            return intersections;\n    }\n\n    //if bounding box is defined add bounding box points to \n    if(this._raycaster && this._raycaster.boundingBox) {\n        for(let point of this._raycaster.boundingBox.points) {\n\n            let angle = Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y);\n            let angleOffsetDeg = Phaser.Math.Angle.ShortestBetween(Phaser.Math.RadToDeg(angle), Phaser.Math.RadToDeg(originalAngle));\n\n            if(Math.abs(angleOffsetDeg) < Phaser.Math.RadToDeg(cone / 2)) {\n                rayTargets.push({\n                    point: point,\n                    angle: angle,\n                    angleOffsetDeg: -angleOffsetDeg\n                });\n            }\n        }\n    }\n\n    for(let i=0, iLength = options.objects.length; i < iLength; i++) {\n        let object = options.objects[i];\n        //if bound in range\n        if(!this.boundsInRange(object))\n            continue;\n        \n        testedObjects.push(object);\n\n        let map, boundingBox;\n        if(object.type === 'body' || object.type === 'composite')\n            map = object.raycasterMap;\n        else\n            map = object.data.get('raycasterMap');\n\n        //get slightly enlarged bounding box due to fridge cases, when ray \"glanced\" border box's corner (v0.10.1)\n        boundingBox = map.getBoundingBox();\n        boundingBox.setTo(boundingBox.x - 0.1, boundingBox.y - 0.1, boundingBox.width + 0.2, boundingBox.height + 0.2);\n\n        map._boundingBox = boundingBox;\n\n        maps.push(map);\n        //get points and angles\n        for(let point of map.getPoints(this)) {\n\n            let angle = Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y);\n            let angleOffsetDeg = Phaser.Math.Angle.ShortestBetween(Phaser.Math.RadToDeg(angle), Phaser.Math.RadToDeg(originalAngle));\n\n            if(Math.abs(angleOffsetDeg) < Phaser.Math.RadToDeg(cone / 2)) {\n                rayTargets.push({\n                    point: point,\n                    angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y),\n                    angleOffsetDeg: -angleOffsetDeg\n                });\n            }\n        }\n\n        //get objects intersections\n        for(let j = i+1, jLength = options.objects.length; j < jLength; j++){\n            let objectB = options.objects[j];\n            let mapB;\n            if(objectB.type === 'body' || objectB.type === 'composite')\n                mapB = objectB.raycasterMap;\n            else\n                mapB = objectB.data.get('raycasterMap');\n            //check if bounding boxes overlap\n            if(!Phaser.Geom.Intersects.RectangleToRectangle(map.getBoundingBox(), mapB.getBoundingBox()))\n                continue;\n            \n            //find objects intersections\n            for(let segmentA of map.getSegments(this)) {\n                for(let segmentB of mapB.getSegments(this)) {\n                    let intersection = [];\n                    if(!Phaser.Geom.Intersects.LineToLine(segmentA, segmentB, intersection))\n                        continue;\n                    let angle = Phaser.Math.Angle.Between(this.origin.x, this.origin.y, intersection.x, intersection.y);\n                    let angleOffsetDeg = Phaser.Math.Angle.ShortestBetween(Phaser.Math.RadToDeg(angle), Phaser.Math.RadToDeg(originalAngle));\n\n                    if(Math.abs(angleOffsetDeg) < Phaser.Math.RadToDeg(cone / 2)) {\n                        rayTargets.push({\n                            point: new Phaser.Geom.Point(intersection.x, intersection.y),\n                            angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, intersection.x, intersection.y),\n                            angleOffsetDeg: -angleOffsetDeg\n                        });\n                    }\n                }\n            }\n        }\n    }\n\n    //sort target points by angle\n    rayTargets.sort(function(a, b){\n        //if rays towards points have the same angles promote closer one\n        if(a.angle == b.angle) {\n            if(Phaser.Math.Distance.Between(this.origin.x, this.origin.y, a.point.x, a.point.y) > Phaser.Math.Distance.Between(this.origin.x, this.origin.y, b.point.x, b.point.y))\n                return 1;\n            else\n                return -1;\n        }\n\n        return a.angleOffsetDeg - b.angleOffsetDeg;\n    }.bind(this));\n\n    let previousTarget = {\n        angle: false\n    };\n\n    //cast rays\n    for(let target of rayTargets){\n        //if current target is the same as previous one skip loop\n        if(target.angle === previousTarget.angle) {\n            continue;\n        }\n\n        previousTarget = target;\n        \n        this.setAngle(target.angle);\n        let intersection = this.cast({\n            objects: testedObjects,\n            target: target.point,\n            internal: true\n        });\n        if(intersection){\n            //if intersection hits target point cast two additional rays\n            let castSides = false;\n            if(this.round) {\n                let roundedTarget = new Phaser.Geom.Point(Math.round(target.point.x), Math.round(target.point.y));\n                castSides = Phaser.Geom.Point.Equals(roundedTarget, intersection)\n            }\n            else {\n                castSides = Phaser.Geom.Point.Equals(target.point, intersection);\n            }\n            if(castSides) {\n                this.setAngle(target.angle - 0.0001);\n                let intersectionA = this.cast({\n                    objects: testedObjects,\n                    internal: true\n                });\n\n                if(intersectionA) {\n                    intersections.push(intersectionA);\n                }\n\n                intersections.push(intersection);\n\n                this.setAngle(target.angle + 0.0001);\n                let intersectionB = this.cast({\n                    objects: testedObjects,\n                    internal: true\n                });\n\n                if(intersectionB) {\n                    intersections.push(intersectionB);\n                }\n\n                continue;\n            }\n\n            intersections.push(intersection);\n        }\n    }\n\n    this.setAngle(originalAngle);\n    this.intersections = intersections;\n    if(this.autoSlice)\n        this.slicedIntersections = this.slice(intersections, false);\n    \n    this._stats.time = performance.now() - startTime;\n\n    this.drawDebug(intersections);\n\n    return intersections;\n}\n","/**\n * Set ray's cone angle (width) in radians.\n *\n * @method Raycaster.Ray#setCone\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.7.0\n *\n * @param {number} [cone = 0] - Ray's cone angle in radians.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setCone(cone = 0) {\n    this.cone = cone;\n    return this;\n}\n\n/**\n * Set ray's cone angle (width) in degrees.\n *\n * @method Raycaster.Ray#setConeDeg\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.7.0\n *\n * @param {number} [cone = 0] - Ray's cone angle in degrees.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setConeDeg(cone = 0) {\n    this.cone = Phaser.Math.DegToRad(cone);\n    return this;\n}\n","/**\n * Configure ray.\n *\n * @method Raycaster.Ray#config\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {object} [options] - Ray's congfiguration options. May include:\n * @param {Phaser.Geom.Point|Point} [options.origin = {x:0, y:0}] - Ray's position.\n * @param {number} [options.angle = 0] - Ray's angle in radians.\n * @param {number} [options.angleDeg = 0] - Ray's angle in degrees.\n * @param {number} [options.cone = 0] - Ray's cone angle in radians.\n * @param {number} [options.coneDeg = 0] - Ray's cone angle in degrees.\n * @param {number} [options.range = Phaser.Math.MAX_SAFE_INTEGER] - Ray's range.\n * @param {number} [options.collisionRange = Phaser.Math.MAX_SAFE_INTEGER] - Ray's maximum collision range of ray's field of view.\n * @param {number} [options.detectionRange = Phaser.Math.MAX_SAFE_INTEGER] - Maximum distance between ray's position and tested objects bounding boxes.\n * @param {boolean} [options.ignoreNotIntersectedRays = true] - If set true, ray returns false when it didn't hit anything. Otherwise returns ray's target position.\n * @param {boolean} [options.autoSlice = false] - If set true, ray will automatically slice intersections into array of triangles and store it in {@link Raycaster.Ray#slicedIntersections Ray.slicedIntersections}.\n * @param {boolean} [options.round = false] - If set true, point where ray hit will be rounded.\n * @param {(boolean|'arcade'|'matter')} [options.enablePhysics = false] - Add to ray physics body. Body will be a circle with radius equal to {@link Raycaster.Ray#collisionRange Ray.collisionRange}. If set true, arcade physics body will be added.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function config(options) {\n    this.object = options.object;\n    //origin\n    if(options.origin !== undefined)\n        this.origin.setTo(options.origin.x, options.origin.y);\n\n    //angle\n    if(options.angle !== undefined)\n        this.angle = Phaser.Math.Angle.Normalize(options.angle);\n\n    //angle deg\n    if(options.angleDeg !== undefined)\n        this.angle = Phaser.Math.Angle.Normalize(Phaser.Math.DegToRad(options.angleDeg));\n\n    //cone angle\n    if(options.cone !== undefined)\n        this.cone = options.cone;\n\n    //cone angle deg\n    if(options.coneDeg !== undefined)\n        this.cone = Phaser.Math.DegToRad(options.coneDeg);\n\n    //ray range (0 = max)\n    if(options.rayRange !== undefined)\n        this.rayRange = options.rayRange;\n\n    //collision range (0 = max)\n    if(options.collisionRange !== undefined)\n        this.collisionRange = options.collisionRange;\n\n    //detection range (0 = max)\n    if(options.detectionRange !== undefined)\n        this.detectionRange = options.detectionRange;\n\n    //ignore not intersected rays\n    if(options.ignoreNotIntersectedRays !== undefined)\n        this.ignoreNotIntersectedRays = (options.ignoreNotIntersectedRays == true)\n    \n    //round\n    if(options.round !== undefined)\n        this.round = (options.round == true)\n\n    //auto slice\n    if(options.autoSlice !== undefined)\n        this.autoSlice = (options.autoSlice == true)\n\n    //enable physics\n    if(options.enablePhysics !== undefined && options.enablePhysics)\n        this.enablePhysics(options.enablePhysics);\n    \n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y,this.detectionRange);\n\n    if(this._raycaster.debugOptions.enabled && this._raycaster.scene !== undefined) {\n        this.graphics =  this._raycaster.scene.add.graphics({ lineStyle: { width: 1, color: 0x00ff00}, fillStyle: { color: 0xff00ff } });\n        this.graphics.setDepth(1000);\n    }\n\n    return this;\n}\n","/**\r\n * Draw rays in debug mode\r\n *\r\n * @method Raycaster.Ray#drawDebug\r\n * @memberof Raycaster\r\n * @private\r\n * @since 0.10.0\r\n * \r\n * @param {Phaser.Geom.Point[]} Array of points of ray's closest intersections with tested objects.\r\n * \r\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\r\n */\r\nexport function drawDebug(intersections) {\r\n    if(this.graphics === undefined || !this._raycaster.debugOptions.enabled)\r\n        return this;\r\n\r\n    //clear\r\n    this.graphics.clear();\r\n\r\n    if(!this._raycaster.debugOptions.rays)\r\n        return this;\r\n    \r\n    if(this._raycaster.debugOptions.graphics.ray) {\r\n        this.graphics.lineStyle(1, this._raycaster.debugOptions.graphics.ray);\r\n\r\n        for(let intersection of intersections) {\r\n            this.graphics.strokeLineShape({\r\n                x1: this.origin.x,\r\n                y1: this.origin.y,\r\n                x2: intersection.x,\r\n                y2: intersection.y\r\n            });\r\n        }\r\n    }\r\n\r\n    if(this._raycaster.debugOptions.graphics.rayPoint) {\r\n        this.graphics.fillStyle(this._raycaster.debugOptions.graphics.rayPoint);\r\n\r\n        this.graphics.fillPoint(this.origin.x, this.origin.y, 3);\r\n        \r\n        for(let intersection of intersections) {\r\n            this.graphics.fillPoint(intersection.x, intersection.y, 3);\r\n        }\r\n    }\r\n\r\n    return this;\r\n}","/**\r\n * Destroy object\r\n *\r\n * @method Raycaster.Ray#destroy\r\n * @memberof Raycaster.Ray\r\n * @instance\r\n * @since 0.10.3\r\n */\r\n export function destroy() {\r\n    if(this.graphics)\r\n        this.graphics.destroy();\r\n\r\n    for(let key in this) {\r\n        delete this[key];\r\n    }\r\n }","/**\n * Add to ray physics body. Body will be a circle with radius equal to {@link Raycaster.Ray#collisionRange Ray.collisionRange}. Physics body can be added only once.\n *\n * @method Raycaster.Ray#enablePhysics\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.8.0\n *\n * @param {'arcade'|'matter'} [type = 'arcade'] - Physics type\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function enablePhysics(type = 'arcade') {\n    \n    if(this.body !== undefined)\n        return this;\n\n    this.collisionCircle = this._raycaster.scene.add.circle(this.origin.x, this.origin.y, this.collisionRange);\n    this.collisionCircle._ray = this;\n\n    if(type === 'matter') {\n        this.bodyType = 'matter';\n\n        if(this.collisionRange == Phaser.Math.MAX_SAFE_INTEGER) {\n            let bounds = this._raycaster.boundingBox;\n            this._raycaster.scene.matter.add.gameObject(this.collisionCircle, { shape: { type: 'rectangle', x:bounds.rectangle.centerX, y:bounds.rectangle.centerY, width:bounds.rectangle.width, height:bounds.rectangle.height }, label: 'phaser-raycaster-ray-body', isSensor: true, ignoreGravity:true });\n        }\n        else {\n            this._raycaster.scene.matter.add.gameObject(this.collisionCircle, { shape: { type: 'circle' }, label: 'phaser-raycaster-ray-body', isSensor: true, ignoreGravity:true });\n        }\n\n        this.body = this.collisionCircle.body;\n        this.body._ray = this;\n        this.setOnCollideActive();\n    }\n    else {\n        this.bodyType = 'arcade';\n        this._raycaster.scene.physics.add.existing(this.collisionCircle);\n\n        this.body = this.collisionCircle.body;\n        this.body\n            .setCircle(this.collisionRange)\n            .setAllowGravity(false)\n            .setImmovable(true);\n        this.body._ray = this;\n    }\n\n    return this;\n}\n","/*Matter physics methods for ray body*/\n/**\n * Sets the collision category of this ray's Matter Body. This number must be a power of two between 2^0 (= 1) and 2^31.\n * Two bodies with different collision groups (see {@link #setCollisionGroup}) will only collide if their collision\n * categories are included in their collision masks (see {@link #setCollidesWith}).\n *\n * @method Raycaster.Ray#setCollisionCategory\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {number} value - Unique category bitfield.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setCollisionCategory(value) {\n    this.body.collisionFilter.category = value;\n\n    return this;\n};\n\n/**\n * Sets the collision group of this ray's Matter Body. If this is zero or two Matter Bodies have different values,\n * they will collide according to the usual rules (see {@link #setCollisionCategory} and {@link #setCollisionGroup}).\n * If two Matter Bodies have the same positive value, they will always collide; if they have the same negative value,\n * they will never collide.\n *\n * @method Raycaster.Ray#setCollisionCategory\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {number} value - Unique group index.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setCollisionGroup(value) {\n    this.body.collisionFilter.group = value;\n\n    return this;\n};\n\n/**\n * Sets the collision mask for this ray's Matter Body. Two Matter Bodies with different collision groups will only\n * collide if each one includes the other's category in its mask based on a bitwise AND, i.e. `(categoryA & maskB) !== 0`\n * and `(categoryB & maskA) !== 0` are both true.*\n *\n * @method Raycaster.Ray#setCollidesWith\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {(number|number[])} categories - A unique category bitfield, or an array of them.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\n\nexport function setCollidesWith(categories) {\n    var flags = 0;\n\n    if (!Array.isArray(categories))\n    {\n        flags = categories;\n    }\n    else\n    {\n        for (var i = 0; i < categories.length; i++)\n        {\n            flags |= categories[i];\n        }\n    }\n\n    this.body.collisionFilter.mask = flags;\n\n    return this;\n};\n\n/**\n * The callback is sent a `Phaser.Types.Physics.Matter.MatterCollisionData` object.\n * \n * This does not change the bodies collision category, group or filter. Those must be set in addition\n * to the callback.\n *\n * @method Raycaster.Ray#setOnCollide\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {function} callback - The callback to invoke when this body starts colliding with another.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setOnCollide(callback) {\n    let self = this;\n    this.body.onCollideCallback = function(collisionInfo) {\n        if(collisionInfo.rayCollided) {\n            callback(collisionInfo);\n        }\n        else if(self.processOverlap(collisionInfo)) {\n            collisionInfo.rayCollided = true;\n            callback(collisionInfo);\n        }\n    };\n\n    return this;\n};\n\n/**\n * The callback is sent a `Phaser.Types.Physics.Matter.MatterCollisionData` object.\n * \n * This does not change the bodies collision category, group or filter. Those must be set in addition\n * to the callback.\n *\n * @method Raycaster.Ray#setOnCollideEnd\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {function} callback - The callback to invoke when this body stops colliding with another.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setOnCollideEnd(callback) {\n    this.body.onCollideEndCallback = function(collisionInfo) {\n        if(collisionInfo.rayCollided) {\n            collisionInfo.rayCollided = false;\n            callback(collisionInfo);\n        }\n    }\n\n    return this;\n};\n\n/**\n * The callback is sent a `Phaser.Types.Physics.Matter.MatterCollisionData` object.\n * \n * This does not change the bodies collision category, group or filter. Those must be set in addition\n * to the callback.\n *\n * @method Raycaster.Ray#setOnCollideActive\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {function} callback - The callback to invoke for the duration of this body colliding with another.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setOnCollideActive(callback) {\n    let self = this;\n    let func = function(collisionInfo) {\n        if(self.processOverlap(collisionInfo)) {\n            let body = collisionInfo.bodyA.label === 'phaser-raycaster-ray-body' ? collisionInfo.bodyB : collisionInfo.bodyA;\n\n            if(collisionInfo.rayCollided !== true) {\n                collisionInfo.rayCollided = true;\n                if(self.body.onCollideCallback) {\n                    self.body.onCollideCallback(collisionInfo);\n                }\n\n                if(self.body.onCollideWith !== undefined && self.body.onCollideWith[body.id]) {\n                    self.body.onCollideWith[body.id](body, collisionInfo);\n                }\n            }\n            if(callback)\n                callback(collisionInfo);\n        }\n        else {\n            if(self.body.onCollideEndCallback && collisionInfo.rayCollided === true) {\n                self.body.onCollideEndCallback(collisionInfo);\n            }\n        }\n    }\n\n    this.body.onCollideActiveCallback = func;\n\n    return this;\n}\n\n/**\n * The callback is sent a reference to the other body, along with a `Phaser.Types.Physics.Matter.MatterCollisionData` object.\n * \n * This does not change the bodies collision category, group or filter. Those must be set in addition\n * to the callback.\n *\n * @method Raycaster.Ray#setOnCollideWith\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {(MatterJS.Body|MatterJS.Body[])} body - The body, or an array of bodies, to test for collisions with.\n * @param {function} callback - The callback to invoke when this body collides with the given body or bodies.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setOnCollideWith(body, callback) {\n    let self = this;\n    let func = function(body, collisionInfo) {\n        if(collisionInfo.rayCollided) {\n            callback(body, collisionInfo);\n        }\n        else if(self.processOverlap(collisionInfo)) {\n            collisionInfo.rayCollided = true;\n            callback(body, collisionInfo);\n        }\n    }\n\n    if (!Array.isArray(body))\n    {\n        body = [ body ];\n    }\n\n    for (var i = 0; i < body.length; i++)\n    {\n        var src = (body[i].hasOwnProperty('body')) ? body[i].body : body[i];\n\n        this.body.setOnCollideWith(src, func);\n    }\n\n    return this;\n};\n","/**\n * Set ray's source position.\n *\n * @method Raycaster.Ray#setOrigin\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {number} x - X coordinate.\n * @param {number} y - Y coordinate.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setOrigin(x, y) {\n    this.origin.setTo(x, y);\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y,this.detectionRange);\n\n    if(this.bodyType === 'matter' && this.collisionRange !== Phaser.Math.MAX_SAFE_INTEGER) {\n        this.collisionCircle.x = x;\n        this.collisionCircle.y = y;\n    }\n    else if(this.bodyType === 'arcade') {\n        this.collisionCircle.x = x;\n        this.collisionCircle.y = y;\n    }\n\n    return this;\n}\n","/**\n * Get game objects overlaping field of view.\n *\n * @method Raycaster.Ray#overlap\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.8.0\n *\n * @param {object|object[]} [objects] - Game object / array off game objects to test.\n *\n * @return {object[]} Array of game objects that overlaps with field of view.\n */\nexport function overlap(objects) {\n    let targets = [];\n    let overlapCircle = new Phaser.Geom.Circle(this.origin.x, this.origin.y, this.collisionRange);\n\n    //matter physics\n    if(this.bodyType === 'matter') {\n        let isCollisionInfo = false;\n        if(objects === undefined) {\n            objects = this._raycaster.scene.matter.query.collides(this.body, this._raycaster.scene.matter.getMatterBodies());\n\n            for(let object of objects) {   \n                let body = object.bodyA === this.body ? object.bodyB : object.bodyA;\n\n                if(this.testMatterOverlap(body))\n                    targets.push(body);\n            }\n        }\n        //get object's body\n        else {\n            if(!Array.isArray(objects))\n                objects = [objects];\n            \n            for(let object of objects) {\n                if(object === this.body)\n                    continue;\n    \n                if(this.testMatterOverlap(object))\n                    targets.push(object);\n            }\n        }\n    }\n    //arcade physics\n    else {\n        let bodies = false;\n        //get bodies in range\n        if(objects === undefined) {\n            objects = this._raycaster.scene.physics.overlapCirc(this.origin.x, this.origin.y, this.collisionRange, true, true);\n            bodies = true;\n        }\n        //get object's body\n        else if(!Array.isArray(objects)) {\n            objects = [objects];\n        }\n        //if objects are bodies\n        if(bodies) {\n            for(let body of objects) {\n                if(body === this.body)\n                    continue;\n            \n                let hitbox;\n                //get physics body hitbox\n                if(body.isCircle) {\n                    hitbox = new Phaser.Geom.Circle(body.position.x + body.halfWidth, body.position.y + body.halfWidth, body.halfWidth);\n                }\n                else {\n                    hitbox = new Phaser.Geom.Rectangle(body.x, body.y, body.width, body.height);\n                }\n\n                if(this.testArcadeOverlap(hitbox))\n                    targets.push(body.gameObject);\n            }\n        }\n        //if objects are game objects\n        else {\n            for(let object of objects) {\n                if(object.body === undefined)\n                    continue;\n\n                let hitbox;\n                //get physics body hitbox\n                if(object.body.isCircle) {\n                    hitbox = new Phaser.Geom.Circle(object.body.position.x + object.body.halfWidth, object.body.position.y + object.body.halfWidth, object.body.halfWidth);\n                    if(!Phaser.Geom.Intersects.CircleToCircle(overlapCircle, hitbox))\n                        continue;\n                }\n                else {\n                    hitbox = new Phaser.Geom.Rectangle(object.body.x, object.body.y, object.body.width, object.body.height);\n                    if(!Phaser.Geom.Intersects.CircleToRectangle(overlapCircle, hitbox))\n                        continue;\n                }\n\n                if(this.testArcadeOverlap(hitbox))\n                    targets.push(object);\n            }\n        }\n    }\n\n    return targets;\n}\n\n/**\n * Process callback for physics collider / overlap.\n *\n * @method Raycaster.Ray#processOverlap\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.8.0\n *\n * @param {object} object1 - Game object or matter body passed by collider / overlap or matter CollisionInfo object.\n * @param {object} object2 - Game object or matter body passed by collider / overlap. Ignored if matter CollisionInfo object was passed as first argument.\n *\n * @return {boolean} Return true if game object is overlapping ray's field of view.\n */\nexport function processOverlap(object1, object2) {\n    let obj1, obj2, target;\n    //check if it's matter collisionInfo object\n    if(object1.bodyA !== undefined && object1.bodyB !== undefined) {\n        obj1 = object1.bodyA;\n        obj2 = object1.bodyB;\n    }\n    else {\n        obj1 = object1;\n        obj2 = object2;\n    }\n\n    if(obj1._ray !== undefined && obj1._ray === this)\n        target = obj2;\n    else if(obj2._ray !== undefined && obj2._ray === this)\n        target = obj1;\n    else\n        return false;\n\n    return (this.overlap(target).length > 0);\n}   \n\n/**\n * Test if hitbox overlaps with field of view. Method used in {@link Raycaster.Ray#overlap Ray.overlap}.\n *\n * @method Raycaster.Ray#testArcadeOverlap\n * @memberof Raycaster.Ray\n * @instance\n * @private\n * @since 0.8.0\n *\n * @param {object} hitbox - Game object's hitbox generated inside {@link Raycaster.Ray#overlap Ray.overlap}.\n *\n * @return {boolean} True if hitbox overlaps with {@link Raycaster.Ray Raycaster.Ray} field of view.\n */\nexport function testArcadeOverlap(hitbox) {\n    let overlap = false;\n\n    //iterate through field of view slices to check collisions with target\n    for(let slice of this.slicedIntersections) {\n        //if hitbox is a circle\n        if(hitbox.type == 0) {\n            overlap = Phaser.Geom.Intersects.TriangleToCircle(slice, hitbox);\n        }\n        //if hitbox is a rectangle\n        else {\n            overlap = Phaser.Geom.Intersects.RectangleToTriangle(hitbox, slice);\n        }\n\n        if(overlap) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/**\n * Test if matter body overlaps with field of view. Method used in {@link Raycaster.Ray#overlap Ray.overlap}.\n *\n * @method Raycaster.Ray#testMatterOverlap\n * @memberof Raycaster.Ray\n * @instance\n * @private\n * @since 0.9.0\n *\n * @param {object} body - Matter body.\n *\n * @return {boolean} True if body overlaps with {@link Raycaster.Ray Raycaster.Ray} field of view.\n */\nexport function testMatterOverlap(object) {\n    let body;\n\n    if(object.type === 'body')\n        body = object;\n    else if(object.body !== undefined)\n        body = object.body;\n    else\n        return false;\n\n    //if body is concave, ignore convex body\n    let parts = body.parts.length > 1 ? body.parts.splice(1) : body.parts;\n    //iterate through bodies\n    for(let part of parts) {\n        let pointA = part.vertices[0];\n\n        for(let i = 1, length = part.vertices.length; i < length; i++) {\n            let pointB = part.vertices[i];\n            let segment = new Phaser.Geom.Line(pointA.x, pointA.y, pointB.x, pointB.y);\n\n            //iterate through field of view slices to check collisions with target\n            for(let slice of this.slicedIntersections) {\n                let overlap = Phaser.Geom.Intersects.TriangleToLine(slice, segment);\n                //additional checking if slice contain segment's points due to TriangleToLine bug.\n                if(!overlap)\n                    overlap = Phaser.Geom.Triangle.ContainsPoint(slice, segment.getPointA());\n                if(!overlap)\n                    overlap = Phaser.Geom.Triangle.ContainsPoint(slice, segment.getPointB());\n\n                if(overlap) {\n                    return true;\n                }\n            }\n            pointA = pointB;\n        }\n\n        //closing segment\n        let segment = new Phaser.Geom.Line(part.vertices[part.vertices.length - 1].x, part.vertices[part.vertices.length - 1].y, part.vertices[0].x, part.vertices[0].y);\n         //iterate through field of view slices to check collisions with target\n        for(let slice of this.slicedIntersections) {\n            let overlap = Phaser.Geom.Intersects.TriangleToLine(slice, segment);\n\n            if(overlap) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n","/**\n * Set ray's range.\n *\n * @method Raycaster.Ray#setRayRange\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {number} [rayRange = Phaser.Math.MAX_SAFE_INTEGER] - Ray's range.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setRayRange(rayRange = Phaser.Math.MAX_SAFE_INTEGER) {\n    this.rayRange = rayRange;\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    return this;\n}\n\n/**\n * Set ray's maximum detection range. Objects outside detection range won't be tested.\n * Ray tests all objects when set to 0.\n *\n * @method Raycaster.Ray#setDetectionRange\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {number} [detectionRange = 0] - Maximum distance between ray's position and tested objects bounding boxes.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setDetectionRange(detectionRange = 0) {\n    this.detectionRange = detectionRange;\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y,this.detectionRange);\n\n    return this;\n}\n\n/**\n * Set ray's field of view maximum collision range. Objects outside collision range won't be tested by {@link Raycaster.Ray#overlap Raycaster.Ray.overlap} method.\n * Determines ray's physics body radius.\n *\n * @method Raycaster.Ray#setCollisionRange\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.8.0\n *\n * @param {number} [collisionRange = Phaser.Math.MAX_SAFE_INTEGER] - Ray's collision range and physics body radius.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setCollisionRange(collisionRange = Phaser.Math.MAX_SAFE_INTEGER) {\n    let oldRangeMax = this.collisionRange == Phaser.Math.MAX_SAFE_INTEGER;\n    this.collisionRange = collisionRange;\n    this.collisionCircle.setRadius(this.collisionRange);\n\n    if(this.bodyType === 'matter') {\n        if(this.collisionRange == Phaser.Math.MAX_SAFE_INTEGER) {\n            let bounds = this._raycaster.boundingBox;\n\n            this._raycaster.scene.matter.body.set(this.body, {\n                shape: {\n                    type: 'rectangle',\n                    x: bounds.rectangle.centerX,\n                    y: bounds.rectangle.centerY,\n                    width: bounds.rectangle.width,\n                    height: bounds.rectangle.height,\n                    circleRadius:0\n                }\n            });\n        }\n        else if(oldRangeMax) {\n            this._raycaster.scene.matter.body.set(this.body, {\n                shape: {\n                    type: 'circle',\n                    x: this.collisionCircle.x,\n                    y: this.collisionCircle.y\n                },\n                circleRadius: this.collisionRange,\n                isStatic: false\n            });\n        }\n        else {\n            this.collisionCircle.setRadius(this.collisionRange);\n        }\n        this._raycaster.scene.matter.body.set(this.body, 'circleRadius', this.collisionRange)\n    }\n    else if(this.bodyType === 'arcade') {\n        this.body.setCircle(this.collisionRange);\n    }\n\n    return this;\n}\n\n/**\n * Test if object's bounding box is in ray's detection range.\n *\n * @method Raycaster.Ray#boundsInRange\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {object} object - Tested object\n * @param {(Phaser.Geom.Rectangle|boolean)} [bounds = false] - Tested object's bounds. If not passed bounds will be generated automatically.\n *\n * @return {boolean} Information if object is in ray's detection range.\n */\nexport function boundsInRange(object, bounds = false) {\n    if(!this.detectionRange)\n        return true;\n\n    let objectBounds;\n    if(bounds)\n        objectBounds = bounds;\n    else {\n        if(object.type === 'body' || object.type === 'composite')\n            objectBounds = object.raycasterMap.getBoundingBox();\n        else\n            objectBounds = object.data.get('raycasterMap').getBoundingBox();\n    }\n\n    if(Phaser.Geom.Intersects.CircleToRectangle(this.detectionRangeCircle, objectBounds))\n        return true;\n\n    return false;\n}\n","/**\n * @classdesc\n *\n * Ray class responsible for casting ray's and testing their collisions with mapped objects.\n *\n * @namespace Raycaster.Ray\n * @class Raycaster.Ray\n * @constructor\n * @since 0.6.0\n *\n * @param {object} [options] - Ray's congfiguration options. May include:\n * @param {Phaser.Geom.Point|Point} [options.origin = {x:0, y:0}] - Ray's position.\n * @param {number} [options.angle = 0] - Ray's angle in radians.\n * @param {number} [options.angleDeg = 0] - Ray's angle in degrees.\n * @param {number} [options.cone = 0] - Ray's cone angle in radians.\n * @param {number} [options.coneDeg = 0] - Ray's cone angle in degrees.\n * @param {number} [options.range = Phaser.Math.MAX_SAFE_INTEGER] - Ray's range.\n * @param {number} [options.collisionRange = Phaser.Math.MAX_SAFE_INTEGER] - Ray's maximum collision range of ray's field of view.\n * @param {number} [options.detectionRange = Phaser.Math.MAX_SAFE_INTEGER] - Maximum distance between ray's position and tested objects bounding boxes.\n * @param {boolean} [options.ignoreNotIntersectedRays = true] - If set true, ray returns false when it didn't hit anything. Otherwise returns ray's target position.\n * @param {boolean} [options.autoSlice = false] - If set true, ray will automatically slice intersections into array of triangles and store it in {@link Raycaster.Ray#slicedIntersections Ray.slicedIntersections}.\n * @param {boolean} [options.round = false] - If set true, point where ray hit will be rounded.\n * @param {(boolean|'arcade'|'matter')} [options.enablePhysics = false] - Add to ray physics body. Body will be a circle with radius equal to {@link Raycaster.Ray#collisionRange Ray.collisionRange}. If set true, arcade physics body will be added.\n * @param {Raycaster} [raycaster] - Parent raycaster object.\n */\nexport function Ray(options, raycaster) {\n    /**\n    * Reference to parent Raycaster object.\n    *\n    * @name Raycaster.Ray#_raycaster\n    * @type {Raycaster}\n    * @private\n    * @since 0.6.0\n    */\n    this._raycaster = raycaster ? raycaster : false;\n    /**\n    * Ray's source position.\n    *\n    * @name Raycaster.Ray#origin\n    * @type {Phaser.Geom.Point}\n    * @since 0.6.0\n    */\n    this.origin = new Phaser.Geom.Point();\n    /**\n    * Ray's representation used to calculating intersections.\n    *\n    * @name Raycaster.Ray#_ray\n    * @type {Phaser.Geom.Line}\n    * @private\n    * @since 0.6.0\n    */\n    this._ray = new Phaser.Geom.Line();\n    /**\n    * Ray's angle in radians.\n    *\n    * @name Raycaster.Ray#angle\n    * @type {number}\n    * @default 0\n    * @since 0.6.0\n    */\n    this.angle = 0;\n    /**\n    * Ray's cone width angle in radians.\n    *\n    * @name Raycaster.Ray#cone\n    * @type {number}\n    * @default 0\n    * @since 0.7.0\n    */\n    this.cone = 0;\n    /**\n    * Ray's maximum range\n    *\n    * @name Raycaster.Ray#rayRange\n    * @type {number}\n    * @default Phaser.Math.MAX_SAFE_INTEGER\n    * @since 0.6.0\n    */\n    this.rayRange = Phaser.Math.MAX_SAFE_INTEGER;\n    /**\n    * Ray's maximum detection range. Objects outside detection range won't be tested.\n    * Ray tests all objects when set to 0.\n    *\n    * @name Raycaster.Ray#detectionRange\n    * @type {number}\n    * @default\n    * @since 0.6.0\n    */\n    this.detectionRange = 0;\n    /**\n    * Ray's representation of detection range used in calculating if objects are in range.\n    *\n    * @name Raycaster.Ray#detectionRangeCircle\n    * @type {Phaser.Geom.Circle}\n    * @private\n    * @since 0.6.0\n    */\n    this.detectionRangeCircle = new Phaser.Geom.Circle();\n    /**\n    * Ray's maximum collision range of ray's field of view. Radius of {@link Raycaster.Ray#collisionRangeCircle Ray.body}.\n    *\n    * @name Raycaster.Ray#collisionRange\n    * @type {number}\n    * @default Phaser.Math.MAX_SAFE_INTEGER\n    * @since 0.8.0\n    */\n    this.collisionRange = Phaser.Math.MAX_SAFE_INTEGER;\n    /**\n    * If set true, ray returns false when it didn't hit anything. Otherwise returns ray's target position.\n    *\n    * @name Raycaster.Ray#ignoreNotIntersectedRays\n    * @type {boolean}\n    * @default true\n    * @since 0.6.0\n    */\n    this.ignoreNotIntersectedRays = true;\n    /**\n    * If set true, ray's hit points will be rounded.\n    *\n    * @name Raycaster.Ray#round\n    * @type {boolean}\n    * @default false\n    * @since 0.8.1\n    */\n    this.round = false;\n    /**\n    * If set true, ray will automatically slice intersections into array of triangles and store it in {@link Raycaster.Ray#slicedIntersections Ray.slicedIntersections}.\n    *\n    * @name Raycaster.Ray#autoSlice\n    * @type {boolean}\n    * @default false\n    * @since 0.8.0\n    */\n    this.autoSlice = false;\n    /**\n    * Array of intersections from last raycast representing field of view.\n    *\n    * @name Raycaster.Ray#intersections\n    * @type {object[]}\n    * @default []\n    * @since 0.8.0\n    */\n    this.intersections = [];\n    /**\n    * Array of triangles representing slices of field of view from last raycast.\n    *\n    * @name Raycaster.Ray#slicedIntersections\n    * @type {Phaser.Geom.Triangle[]}\n    * @default []\n    * @since 0.8.0\n    */\n    this.slicedIntersections = [];\n\n    /**\n    * Physics body for testing field of view collisions.\n    *\n    * @name Raycaster.Ray#body\n    * @type {object}\n    * @default undefined\n    * @since 0.8.0\n    */\n    //this.body = false;\n    /**\n    * Physics body type.\n    *\n    * @name Raycaster.Ray#bodyType\n    * @type {(boolean|'arcade'|'matter')}\n    * @default false\n    * @since 0.9.0\n    */\n    this.bodyType = false;\n\n    /**\n    * Ray casting stats.\n    *\n    * @name Raycaster.Ray#_stats\n    * @type {object}\n    * @private\n    * @since 0.10.0\n    * \n    * @property {string} method Used casting method (cast, castCircle, castCone).\n    * @property {number} rays Casted rays.\n    * @property {number} testedMappedObjects Tested mapped objects.\n    * @property {number} hitMappedObjects Hit mapped objects.\n    * @property {number} segments Tested segments.\n    * @property {number} time Casting time.\n    */\n    this._stats = {\n        method: 'cast',\n        rays: 0,\n        testedMappedObjects: 0,\n        hitMappedObjects: 0,\n        segments: 0,\n        time: 0\n    };\n\n    /**\n    * Ray's graphics object used for debug\n    *\n    * @name Raycaster.Ray#graphics\n    * @type {Phaser.GameObjects.Graphics}\n    * @private\n    * @since 0.10.0\n    */\n     this.graphics;\n\n    this.config(options);\n};\n\nRay.prototype = {\n    config: require('./config.js').config,\n    getStats: require('./stats.js').getStats,\n    setRay: require('./ray.js').setRay,    \n    setOrigin: require('./origin.js').setOrigin,\n    setRayRange: require('./range.js').setRayRange,\n    setAngle: require('./angle.js').setAngle,\n    setAngleDeg: require('./angle.js').setAngleDeg,\n    setCone: require('./cone.js').setCone,\n    setConeDeg: require('./cone.js').setConeDeg,\n    setDetectionRange: require('./range.js').setDetectionRange,\n    boundsInRange: require('./range.js').boundsInRange,\n    cast: require('./cast.js').cast,\n    castCircle: require('./castCircle.js').castCircle,\n    castCone: require('./castCone.js').castCone,\n    slice: require('./slice.js').slice,\n    setCollisionRange: require('./range.js').setCollisionRange,\n    enablePhysics: require('./enablePhysics.js').enablePhysics,\n    overlap: require('./overlap.js').overlap,\n    processOverlap: require('./overlap.js').processOverlap,\n    testArcadeOverlap: require('./overlap.js').testArcadeOverlap,\n    testMatterOverlap: require('./overlap.js').testMatterOverlap,\n    setCollisionCategory: require('./matter-physics-methods.js').setCollisionCategory,\n    setCollisionGroup: require('./matter-physics-methods.js').setCollisionGroup,\n    setCollidesWith: require('./matter-physics-methods.js').setCollidesWith,\n    setOnCollide: require('./matter-physics-methods.js').setOnCollide,\n    setOnCollideEnd: require('./matter-physics-methods.js').setOnCollideEnd,\n    setOnCollideActive: require('./matter-physics-methods.js').setOnCollideActive,\n    setOnCollideWith: require('./matter-physics-methods.js').setOnCollideWith,\n    drawDebug: require('./debug.js').drawDebug,\n    destroy: require('./destroy.js').destroy,\n};\n","/**\n * Set ray's position, direction (angle) and range.\n *\n * @method Raycaster.Ray#setRay\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {number} x - X coordinate.\n * @param {number} y - Y coordinate.\n * @param {number} [angle] - Ray's angle in radians.\n * @param {number} [range = Phaser.Math.MAX_SAFE_INTEGER] - Ray's range.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setRay(x, y, angle, rayRange = Phaser.Math.MAX_SAFE_INTEGER) {\n    this.origin.setTo(x, y);\n    this.angle = Phaser.Math.Angle.Normalize(angle);\n    this.rayRange = rayRange;\n\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y, this.detectionRange);\n    return this;\n}\n","/**\n * Slice ray's field of view represented by polygon or array of points into array of triangles.\n *\n * @method Raycaster.Ray#slice\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.8.0\n *\n * @param {(object[]|Phaser.Geom.Polygon)} [fov = {Ray#fov}] - Array of points or polygon representing field of view. If not passed, filed of view from last raycaste will be used.\n * @param {boolean} [closed = true|{Ray#fov}] - Define if field of view polygon is closed (first and last vertices sholud be connected). If fov was not passed, value depends of last type of casting.\n *\n * @return {Phaser.Geom.Triangle[]} Array of triangles representing slices of field of view.\n */\nexport function slice(intersections = this.intersections, closed = true) {\n    //if intersections is Phaser.Geom.Polygon object\n    if(!Array.isArray(intersections)) {\n        if(intersections.type === 4)\n            intersections = intersections.points;\n        else\n            return [];\n    }\n\n    if(intersections.length === 0)\n        return [];\n\n    let slices = [];\n    for(let i = 0, iLength = intersections.length - 1; i < iLength; i++) {\n        slices.push(new Phaser.Geom.Triangle(this.origin.x, this.origin.y, intersections[i].x, intersections[i].y, intersections[i+1].x, intersections[i+1].y));\n    }\n\n    if(closed)\n        slices.push(new Phaser.Geom.Triangle(this.origin.x, this.origin.y, intersections[0].x, intersections[0].y, intersections[intersections.length-1].x, intersections[intersections.length-1].y));\n\n    return slices;\n}\n","/**\r\n * Get ray statistics for last casting. Stats include\r\n * * number of casted rays,\r\n * * number of tested mapped objects,\r\n * * number of tested map segments.\r\n * * casting time\r\n *\r\n * @method Raycaster.Ray#getStats\r\n * @memberof Raycaster.Ray\r\n * @instance\r\n * @since 0.10.0\r\n *\r\n * @return {object} Statisticss from last casting.\r\n */\r\n export function getStats() {\r\n     return this._stats;\r\n }\r\n","/**\r\n* @author       Marcin Walczak <contact@marcin-walczak.pl>\r\n* @copyright    2023 Marcin Walczak\r\n* @license      {@link https://github.com/wiserim/phaser-raycaster/blob/master/LICENSE|MIT License}\r\n*/\r\n\r\n/**\r\n * @classdesc\r\n *\r\n * Raycaster class responsible for creating ray objects and managing mapped objects.\r\n * \r\n * @namespace Raycaster\r\n * @class Raycaster\r\n * @constructor\r\n * @since 0.6.0\r\n *\r\n * @param {object} [options] - Raycaster's configuration options. May include:\r\n * @param {Phaser.Scene} [options.scene] - Scene in which Raycaster will be used.\r\n * @param {number} [options.mapSegmentCount = 0] - Number of segments of circle maps. If set to 0, map will be teste\r\n * @param {(object|object[])} [options.objects] - Game object or array of game objects to map.\r\n * @param {Phaser.Geom.Rectangle} [options.boundingBox] - Raycaster's bounding box. If not passed, {@link Raycaster Raycaster} will set it's bounding box based on Arcade Physics / Matter physics world bounds.\r\n * @param {boolean} [options.autoUpdate = true] - If set true, automatically update dynamic maps on scene update event.\r\n * @param {boolean|object} [options.debug] - Enable debug mode or configure it {@link Raycaster#debugOptions debugOptions}.\r\n */\r\nexport function Raycaster(options) {\r\n    /**\r\n    * Plugin version.\r\n    *\r\n    * @name Raycaster#version\r\n    * @type {string}\r\n    * @readonly\r\n    * @since 0.6.0\r\n    */\r\n    this.version = '0.10.7';\r\n    /**\r\n    * Raycaster's scene\r\n    *\r\n    * @name Raycaster#scene\r\n    * @type {Phaser.Scene}\r\n    * @private\r\n    * @since 0.6.0\r\n    */\r\n    this.scene;\r\n    /**\r\n    * Raycaster's graphics object used for debug\r\n    *\r\n    * @name Raycaster#graphics\r\n    * @type {Phaser.GameObjects.Graphics}\r\n    * @private\r\n    * @since 0.10.0\r\n    */\r\n    this.graphics;\r\n    /**\r\n    * Raycaster's debug config\r\n    *\r\n    * @name Raycaster#debugOptions\r\n    * @type {Object}\r\n    * @since 0.10.0\r\n    * \r\n    * @property {boolean} [enable = false] Enable debug mode\r\n    * @property {boolean} [maps = true] - Enable maps debug\r\n    * @param {boolean} [rays = true] - Enable rays debug\r\n    * @property {boolean} graphics - Debug graphics options\r\n    * @property {boolean|number} [graphics.ray = 0x00ff00] - Debug ray color. Set false to disable.\r\n    * @property {boolean|number} [graphics.rayPoint = 0xff00ff] - Debug ray point color. Set false to disable.\r\n    * @property {boolean|number} [graphics.mapPoint = 0x00ffff] - debug map point color. Set false to disable.\r\n    * @property {boolean|number} [graphics.mapSegment = 0x0000ff] - Debug map segment color. Set false to disable.\r\n    * @property {boolean|number} [graphics.mapBoundingBox = 0xff0000] - Debug map bounding box color. Set false to disable.\r\n    */\r\n    this.debugOptions = {\r\n        enabled: false,\r\n        maps: true,\r\n        rays: true,\r\n        graphics: {\r\n            ray: 0x00ff00,\r\n            rayPoint: 0xff00ff,\r\n            mapPoint: 0x00ffff,\r\n            mapSegment: 0x0000ff,\r\n            mapBoundingBox: 0xff0000\r\n        }\r\n    };\r\n\r\n    /**\r\n    * Raycaster statistics.\r\n    *\r\n    * @name Raycaster.Raycaster#_stats\r\n    * @type {object}\r\n    * @private\r\n    * @since 0.10.0\r\n    * \r\n    * @property {object} mappedObjects Mapped objects statistics.\r\n    * @property {number} mappedObjects.total Mapped objects total.\r\n    * @property {number} mappedObjects.static Static maps.\r\n    * @property {number} mappedObjects.dynamic Dynamic maps.\r\n    * @property {number} mappedObjects.rectangleMaps Rectangle maps.\r\n    * @property {number} mappedObjects.polygonMaps Polygon maps.\r\n    * @property {number} mappedObjects.circleMaps Circle maps.\r\n    * @property {number} mappedObjects.lineMaps Line maps.\r\n    * @property {number} mappedObjects.containerMaps Container maps.\r\n    * @property {number} mappedObjects.tilemapMaps Tilemap maps.\r\n    * @property {number} mappedObjects.matterMaps Matter body maps.\r\n    */\r\n     this._stats = {\r\n        mappedObjects: {\r\n            total: 0,\r\n            static: 0,\r\n            dynamic: 0,\r\n            rectangleMaps: 0,\r\n            polygonMaps: 0,\r\n            circleMaps: 0,\r\n            lineMaps: 0,\r\n            containerMaps: 0,\r\n            tilemapMaps: 0,\r\n            matterMaps: 0\r\n        }\r\n     };\r\n\r\n    /**\r\n    * Raycaster's bounding box. By default it's size is based on Arcade Physics / Matter physics world bounds.\r\n    * If world size will change after creation of Raycaster, bounding box needs to be updated.\r\n    *\r\n    * @name Raycaster#boundingBox\r\n    * @type {Phaser.Geom.Rectangle}\r\n    * @default false\r\n    * @private\r\n    * @since 0.6.0\r\n    */\r\n    this.boundingBox = false;\r\n    /**\r\n    * Array of mapped game objects.\r\n    *\r\n    * @name Raycaster#mappedObjects\r\n    * @type {object[]}\r\n    * @since 0.6.0\r\n    */\r\n    this.mappedObjects = [];\r\n    /**\r\n    * Array of dynamic mapped game objects.\r\n    *\r\n    * @name Raycaster#dynamicMappedObjects\r\n    * @type {object[]}\r\n    * @since 0.10.6\r\n    */\r\n     this.dynamicMappedObjects = [];\r\n    /**\r\n    * Number of segments of circle maps.\r\n    *\r\n    * @name Raycaster#mapSegmentCount\r\n    * @type {number}\r\n    * @default 0\r\n    * @since 0.6.0\r\n    */\r\n    this.mapSegmentCount = 0;\r\n\r\n    if(options !== undefined) {\r\n        if(options.boundingBox === undefined && options.scene !== undefined) {\r\n            if(options.scene.physics !== undefined)\r\n                options.boundingBox = options.scene.physics.world.bounds;\r\n            else if(options.scene.matter !== undefined) {\r\n                let walls = options.scene.matter.world.walls;\r\n\r\n                if(walls.top !== null) {\r\n                    options.boundingBox = new Phaser.Geom.Rectangle(\r\n                        walls.top.vertices[3].x,\r\n                        walls.top.vertices[3].y,\r\n                        walls.bottom.vertices[1].x - walls.top.vertices[3].x,\r\n                        walls.bottom.vertices[1].y - walls.top.vertices[3].y\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setOptions(options);\r\n\r\n        if(options.autoUpdate === undefined || options.autoUpdate)\r\n            //automatically update event\r\n            this.scene.events.on('update', this.update, this);\r\n    }\r\n    else\r\n        //automatically update event\r\n        this.scene.events.on('update', this.update, this);\r\n\r\n    return this;\r\n}\r\n\r\nRaycaster.prototype = {\r\n    /**\r\n    * Configure raycaster.\r\n    *\r\n    * @method Raycaster#setOptions\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.6.0\r\n    *\r\n    * @param {object} [options] - Raycaster's congfiguration options. May include:\r\n    * @param {Phaser.Scene} [options.scene] - Scene in which Raycaster will be used.\r\n    * @param {number} [options.mapSegmentCount = 0] - Number of segments of circle maps.\r\n    * @param {(object|object[])} [options.objects] - Game object or array of game objects to map.\r\n    * @param {Phaser.Geom.Rectangle} [options.boundingBox] - Raycaster's bounding box.\r\n    * @param {boolean|object} [options.debug] - Enable debug mode or cofigure {@link Raycaster#debugOptions debugOptions}.\r\n    *\r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    setOptions: function(options) {\r\n        if(options.scene !== undefined) {\r\n            this.scene = options.scene;\r\n            this.graphics =  this.scene.add.graphics({ lineStyle: { width: 1, color: 0x00ff00}, fillStyle: { color: 0xff00ff } });\r\n            this.graphics.setDepth(999);\r\n        }\r\n\r\n        if(options.debug !== undefined && options.debug !== false) {\r\n            this.debugOptions.enabled = true;\r\n\r\n            if(typeof options.debug === 'object')\r\n                Object.assign(this.debugOptions, options.debug);\r\n        }\r\n\r\n        if(options.mapSegmentCount !== undefined)\r\n            this.mapSegmentCount = options.mapSegmentCount;\r\n\r\n        if(options.objects !== undefined)\r\n            this.mapGameObjects(options.objects);\r\n\r\n        if(options.boundingBox !== undefined)\r\n            this.setBoundingBox(options.boundingBox.x, options.boundingBox.y, options.boundingBox.width, options.boundingBox.height)\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n    * Set Raycaster's bounding box.\r\n    *\r\n    * @method Raycaster#setBoundingBox\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.6.0\r\n    *\r\n    * @param {number} x - The X coordinate of the top left corner of bounding box.\r\n    * @param {number} y - The Y coordinate of the top left corner of bounding box.\r\n    * @param {number} width - The width of bounding box.\r\n    * @param {number} height - The height of bounding box.\r\n    *\r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    setBoundingBox: function(x, y, width, height) {\r\n        this.boundingBox = {\r\n            rectangle: new Phaser.Geom.Rectangle(x, y, width, height),\r\n            points: [],\r\n            segments: []\r\n        }\r\n        //set points\r\n        let points = [\r\n            new Phaser.Geom.Point(this.boundingBox.rectangle.left, this.boundingBox.rectangle.top),\r\n            new Phaser.Geom.Point(this.boundingBox.rectangle.right, this.boundingBox.rectangle.top),\r\n            new Phaser.Geom.Point(this.boundingBox.rectangle.right, this.boundingBox.rectangle.bottom),\r\n            new Phaser.Geom.Point(this.boundingBox.rectangle.left, this.boundingBox.rectangle.bottom)\r\n        ];\r\n\r\n        this.boundingBox.points = points;\r\n\r\n        //set segments\r\n        for(let i = 0, length = this.boundingBox.points.length; i < length; i++) {\r\n            if(i+1 < length)\r\n            this.boundingBox.segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));\r\n            else\r\n            this.boundingBox.segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[0].x, points[0].y));\r\n        }\r\n    },\r\n\r\n    /**\r\n    * Map game objects\r\n    *\r\n    * @method Raycaster#mapGameObjects\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.6.0\r\n    *\r\n    * @param {object|object[]} objects - Game object / matter body or array of game objects / matter bodies to map.\r\n    * @param {boolean} [dynamic = false] - {@link Raycaster.Map Raycaster.Map} dynamic flag (determines map will be updated automatically).\r\n    * @param {object} [options] - Additional options for {@link Raycaster.Map Raycaster.Map}\r\n    *\r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    mapGameObjects: function(objects, dynamic = false, options = {}) {\r\n        options.dynamic = dynamic;\r\n        options.segmentCount = (options.segmentCount !== undefined) ? options.segmentCount : this.segmentCount;\r\n\r\n        if(!Array.isArray(objects))\r\n            objects = [objects];\r\n        \r\n        for(let object of objects) {\r\n            if(this.mappedObjects.includes(object))\r\n                continue;\r\n\r\n            //if object is not supported\r\n            if(object.data && object.data.get('raycasterMapNotSupported'))\r\n                continue;\r\n\r\n            let config = {};\r\n            for(let option in options) {\r\n                config[option] = options[option];\r\n            }\r\n            config.object = object;\r\n            \r\n            let map = new this.Map(config, this);\r\n            \r\n            if(map.notSupported) {\r\n                map.destroy();\r\n                continue;\r\n            }\r\n\r\n            if(object.type === 'body' || object.type === 'composite') {\r\n                object.raycasterMap = map;\r\n            }\r\n            else if(!object.data) {\r\n                object.setDataEnabled();\r\n                object.data.set('raycasterMap', map);\r\n            }\r\n            else {\r\n                object.data.set('raycasterMap', map);\r\n            }\r\n\r\n            this.mappedObjects.push(object);\r\n\r\n            //update stats            \r\n            switch(object.type) {\r\n                case 'Polygon':\r\n                    this._stats.mappedObjects.polygonMaps++;\r\n                    break;\r\n                case 'Arc':\r\n                    this._stats.mappedObjects.circleMaps++;\r\n                    break;\r\n                case 'Line':\r\n                    this._stats.mappedObjects.lineMaps++;\r\n                    break;\r\n                case 'Container':\r\n                    this._stats.mappedObjects.containerMaps++;\r\n                    break;\r\n                case 'StaticTilemapLayer':\r\n                    this._stats.mappedObjects.tilemapMaps++;\r\n                    break;\r\n                case 'DynamicTilemapLayer':\r\n                    this._stats.mappedObjects.tilemapMaps++;\r\n                    break;\r\n                case 'TilemapLayer':\r\n                    this._stats.mappedObjects.tilemapMaps++;\r\n                    break;\r\n                case 'MatterBody':\r\n                    this._stats.mappedObjects.matterMaps++;\r\n                    break;\r\n                default:\r\n                    this._stats.mappedObjects.rectangleMaps++;\r\n            }\r\n        }\r\n\r\n        this._stats.mappedObjects.total = this.mappedObjects.length;\r\n        this._stats.mappedObjects.static = this._stats.mappedObjects.total - this.dynamicMappedObjects.length;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n    * Remove game object's {@link Raycaster.Map Raycaster.Map} maps.\r\n    *\r\n    * @method Raycaster#removeMappedObjects\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.6.0\r\n    *\r\n    * @param {(object|object[])} objects - Game object or array of game objects which maps will be removed.\r\n    *\r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    removeMappedObjects: function(objects) {\r\n        if(!Array.isArray(objects))\r\n            objects = [objects];\r\n\r\n        for(let object of objects) {\r\n            //remove object from mapped objects list\r\n            let index = this.mappedObjects.indexOf(object);\r\n            if(index === -1) {\r\n                continue;\r\n            }\r\n            \r\n            this.mappedObjects.splice(index, 1);\r\n            \r\n            //remove object from dynamic mapped objects list\r\n            index = this.dynamicMappedObjects.indexOf(object);\r\n            if(index >= 0)\r\n                this.dynamicMappedObjects.splice(index, 1);\r\n            \r\n            if(object.type === 'body' || object.type === 'composite') {\r\n                object.raycasterMap.destroy();\r\n            }\r\n            else {\r\n                object.data.get('raycasterMap').destroy();\r\n            }\r\n            \r\n            //update stats            \r\n            switch(object.type) {\r\n                case 'Polygon':\r\n                    this._stats.mappedObjects.polygonMaps--;\r\n                    break;\r\n                case 'Arc':\r\n                    this._stats.mappedObjects.circleMaps--;\r\n                    break;\r\n                case 'Line':\r\n                    this._stats.mappedObjects.lineMaps--;\r\n                    break;\r\n                case 'Container':\r\n                    this._stats.mappedObjects.containerMaps--;\r\n                    break;\r\n                case 'StaticTilemapLayer':\r\n                    this._stats.mappedObjects.tilemapMaps--;\r\n                    break;\r\n                case 'DynamicTilemapLayer':\r\n                    this._stats.mappedObjects.tilemapMaps--;\r\n                    break;\r\n                case 'TilemapLayer':\r\n                    this._stats.mappedObjects.tilemapMaps--;\r\n                    break;\r\n                case 'MatterBody':\r\n                    this._stats.mappedObjects.matterMaps--;\r\n                    break;\r\n                default:\r\n                    this._stats.mappedObjects.rectangleMaps--;\r\n            }\r\n        }\r\n\r\n        this._stats.mappedObjects.total = this.mappedObjects.length;\r\n        this._stats.mappedObjects.dynamic = this.dynamicMappedObjects.length;\r\n        this._stats.mappedObjects.static = this._stats.mappedObjects.total - this.dynamicMappedObjects.length;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n    * Enable game object's {@link Raycaster.Map Raycaster.Map} maps.\r\n    *\r\n    * @method Raycaster#enableMaps\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.7.2\r\n    *\r\n    * @param {(object|object[])} objects - Game object or array of game objects which maps will be enabled.\r\n    *\r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    enableMaps: function(objects) {\r\n        if(!Array.isArray(objects))\r\n            objects = [objects];\r\n        \r\n        for(let object of objects) {\r\n            let map;\r\n\r\n            if(object.type === 'body' || object.type === 'composite') {\r\n                map = object.raycasterMap;\r\n            }\r\n            else if(object.data) {\r\n                map = object.data.get('raycasterMap');\r\n            }\r\n\r\n            if(map)\r\n                map.active = true;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n    * Disable game object's {@link Raycaster.Map Raycaster.Map} maps.\r\n    *\r\n    * @method Raycaster#disableMaps\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.7.2\r\n    *\r\n    * @param {(object|object[])} objects - Game object or array of game objects which maps will be disabled.\r\n    *\r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    disableMaps: function(objects) {\r\n        if(!Array.isArray(objects))\r\n            objects = [objects];\r\n        \r\n        for(let object of objects) {\r\n            let map;\r\n\r\n            if(object.type === 'body' || object.type === 'composite') {\r\n                map = object.raycasterMap;\r\n            }\r\n            else if(object.data) {\r\n                map = object.data.get('raycasterMap');\r\n            }\r\n\r\n            if(map)\r\n                map.active = false;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n    * Updates all {@link Raycaster.Map Raycaster.Map} dynamic maps. Fired on Phaser.Scene update event.\r\n    *\r\n    * @method Raycaster#update\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.6.0\r\n    * \r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    update: function() {\r\n        //update dynamic maps\r\n        if(this.dynamicMappedObjects.length > 0) {\r\n            for(let mapppedObject of this.dynamicMappedObjects) {\r\n                let map;\r\n\r\n                if(mapppedObject.type === 'body' || mapppedObject.type === 'composite') {\r\n                    map = mapppedObject.raycasterMap;\r\n                }\r\n                else if(mapppedObject.data) {\r\n                    map = mapppedObject.data.get('raycasterMap');\r\n                }\r\n\r\n                if(!map)\r\n                    continue;\r\n\r\n                if(map.active) {\r\n                    map.updateMap();\r\n                }\r\n            }\r\n        }\r\n\r\n        //debug\r\n        if(this.debugOptions.enabled)\r\n            this.drawDebug();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n    * Create {@link Raycaster.Ray Raycaster.Ray} object.\r\n    *\r\n    * @method Raycaster#createRay\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.6.0\r\n    *\r\n    * @param {object} [options] - Ray's congfiguration options. May include:\r\n    * @param {Phaser.Geom.Point|Point} [options.origin = {x:0, y:0}] - Ray's position.\r\n    * @param {number} [options.angle = 0] - Ray's angle in radians.\r\n    * @param {number} [options.angleDeg = 0] - Ray's angle in degrees.\r\n    * @param {number} [options.cone = 0] - Ray's cone angle in radians.\r\n    * @param {number} [options.coneDeg = 0] - Ray's cone angle in degrees.\r\n    * @param {number} [options.range = Phaser.Math.MAX_SAFE_INTEGER] - Ray's range.\r\n    * @param {number} [options.collisionRange = Phaser.Math.MAX_SAFE_INTEGER] - Ray's maximum collision range of ray's field of view.\r\n    * @param {number} [options.detectionRange = Phaser.Math.MAX_SAFE_INTEGER] - Maximum distance between ray's position and tested objects bounding boxes.\r\n    * @param {boolean} [options.ignoreNotIntersectedRays = true] - If set true, ray returns false when it didn't hit anything. Otherwise returns ray's target position.\r\n    * @param {boolean} [options.autoSlice = false] - If set true, ray will automatically slice intersections into array of triangles and store it in {@link Raycaster.Ray#slicedIntersections Ray.slicedIntersections}.\r\n    * @param {boolean} [options.round = false] - If set true, point where ray hit will be rounded.\r\n    * @param {(boolean|'arcade'|'matter')} [options.enablePhysics = false] - Add to ray physics body. Body will be a circle with radius equal to {@link Raycaster.Ray#collisionRange Ray.collisionRange}. If set true, arcade physics body will be added.\r\n    *\r\n    * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\r\n    */\r\n    createRay: function(options = {}) {\r\n        return new this.Ray(options, this);\r\n    },\r\n\r\n    /**\r\n    * Get raycaster statistics.\r\n    *\r\n    * @method Raycaster#getStats\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.10.0\r\n    *\r\n    * @return {object} Raycaster statistics.\r\n    */\r\n    getStats: function() {\r\n        return this._stats;\r\n    },\r\n\r\n    /**\r\n    * Draw maps in debug mode\r\n    *\r\n    * @method Raycaster#drawDebug\r\n    * @memberof Raycaster\r\n    * @private\r\n    * @since 0.10.0\r\n    * \r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n     drawDebug: function() {\r\n        if(this.graphics === undefined || !this.debugOptions.enabled)\r\n            return this;\r\n\r\n        //clear\r\n        this.graphics.clear();\r\n\r\n        if(!this.debugOptions.maps)\r\n            return this;\r\n            \r\n        for(let object of this.mappedObjects)\r\n        {\r\n            let map;\r\n        \r\n            if(object.type === 'body' || object.type === 'composite')\r\n                map = object.raycasterMap;\r\n            else if(object.data)\r\n                map = object.data.get('raycasterMap');\r\n            \r\n            if(!map)\r\n                continue;\r\n\r\n            //draw bounding box\r\n            if(this.debugOptions.graphics.mapBoundingBox) {\r\n                this.graphics.lineStyle(1, this.debugOptions.graphics.mapBoundingBox);\r\n                this.graphics.strokeRectShape(map.getBoundingBox());\r\n            }\r\n\r\n            //draw segments\r\n            if(this.debugOptions.graphics.mapSegment) {\r\n                this.graphics.lineStyle(1, this.debugOptions.graphics.mapSegment);\r\n                for(let segment of map.getSegments()) {\r\n                    this.graphics.strokeLineShape(segment);\r\n                }\r\n            }\r\n\r\n            //draw points\r\n            if(this.debugOptions.graphics.mapPoint) {\r\n                this.graphics.fillStyle(this.debugOptions.graphics.mapPoint);\r\n                for(let point of map.getPoints()) {\r\n                    this.graphics.fillPoint(point.x, point.y, 3)\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Destroy object and all mapped objects.\r\n     *\r\n     * @method Raycaster#destroy\r\n     * @memberof Raycaster\r\n     * @instance\r\n     * @since 0.10.3\r\n     */\r\n    destroy: function() {\r\n        this.removeMappedObjects(this.mappedObjects);\r\n        \r\n        if(this.graphics)\r\n            this.graphics.destroy();\r\n        \r\n        if(this.scene) {\r\n            this.scene.events.removeListener('update', null, this);\r\n        }\r\n\r\n        for(let key in this) {\r\n            delete this[key];\r\n        }\r\n    }\r\n}\r\n\r\nRaycaster.prototype.Map = require('./map/map-core.js').Map;\r\nRaycaster.prototype.Ray = require('./ray/ray-core.js').Ray;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(880);\n"],"names":["root","factory","exports","module","define","amd","self","PhaserRaycaster","_Phaser$Plugins$Scene","_inherits","Phaser","Plugins","ScenePlugin","_super","_createSuper","scene","pluginManager","_this","_classCallCheck","call","_Raycaster","require","key","value","options","arguments","length","undefined","this","getBoundingBox","object","getBounds","rectangle","line","polygon","arc","container","tilemap","matterBody","segmentCount","boundingBox","config","type","getPoints","getSegments","updateMap","circle","setSegmentCount","mapChild","_circles","_updateChildMap","collisionTiles","setCollisionTiles","setOrigin","forceConvex","forceVerticesMapping","notSupported","dynamic","active","destroy","raycasterMap","data","remove","ray","_points","points","offset","Geom","Point","x","displayWidth","originX","y","displayHeight","originY","c","rayA","Line","rayB","rotation","vector","SetToAngle","Angle","Length","cB","getPointB","origin","rayLength","Math","sqrt","pow","radius","scaleX","angle","dAngle","asin","push","_segments","scaleY","geom","segments","_step","newPoints","_iterator","_createForOfIteratorHelper","s","n","done","point","err","e","f","_step2","_iterator2","i","isChild","_raycaster","createRay","iterate","child","bind","iLength","list","childA","mapA","get","j","jLength","childB","mapB","Intersects","RectangleToRectangle","_step3","segmentA","_iterator3","segmentB","intersection","LineToLine","setDataEnabled","map","constructor","set","_step4","childPoints","_iterator4","_step5","_iterator5","segment","pointA","getPointA","pointB","vectorA","vectorB","circleOffset","Circle","_step6","_iterator6","childMapCircle","Map","raycaster","_dynamic","prototype","dynamicMappedObjects","_stats","mappedObjects","static","total","index","indexOf","splice","body","circleRadius","position","scale","bodies","generateBounds","bounds","bodyItem","parts","vertices","_loop","find","_loop2","segmentIndex","findIndex","x1","y1","x2","y2","closingSegment","matter","composite","Rectangle","min","max","closePath","last","getTopLeft","getTopRight","getBottomRight","getBottomLeft","prevPoint","slice","nextPoint","detectionRange","MAX_SAFE_INTEGER","Distance","Between","LineToCircle","detectionRangeCircle","horizontal","horizontals","verticals","layer","row","tile","upperEdge","includes","leftEdge","vertical","height","width","tileWidth","tileHeight","verticalsLastColumn","_i","_verticals","column","filter","_step7","_iterator7","horizontalSegment","tiles","count","setAngle","Normalize","_ray","rayRange","setAngleDeg","DegToRad","cast","closestIntersection","closestSegment","closestObject","closestDistance","internal","startTime","performance","now","stats","method","rays","testedMappedObjects","hitMappedObjects","time","intersections","GetLineToRectangle","distance","target","objects","result","boundingBoxIntersections","canTestMap","_boundingBox","setTo","_boundingBoxIntersect","boundingBoxIntersection","Equals","isTangent","circleIntersections","GetLineToCircle","_step8","_iterator8","ignoreNotIntersectedRays","round","drawDebug","castCircle","originalAngle","maps","rayTargets","testedObjects","boundsInRange","objectB","sort","a","b","previousTarget","_rayTargets","castSides","roundedTarget","intersectionA","intersectionB","autoSlice","slicedIntersections","castCone","minAngle","maxAngle","cone","coneDeg","angleOffsetDeg","RadToDeg","ShortestBetween","abs","setCone","setConeDeg","angleDeg","collisionRange","enablePhysics","debugOptions","enabled","graphics","add","lineStyle","color","fillStyle","setDepth","clear","strokeLineShape","rayPoint","fillPoint","collisionCircle","bodyType","gameObject","shape","centerX","centerY","label","isSensor","ignoreGravity","setOnCollideActive","physics","existing","setCircle","setAllowGravity","setImmovable","setCollisionCategory","collisionFilter","category","setCollisionGroup","group","setCollidesWith","categories","flags","Array","isArray","mask","setOnCollide","callback","onCollideCallback","collisionInfo","rayCollided","processOverlap","setOnCollideEnd","onCollideEndCallback","onCollideActiveCallback","bodyA","bodyB","onCollideWith","id","setOnCollideWith","func","src","hasOwnProperty","overlap","targets","overlapCircle","query","collides","getMatterBodies","testMatterOverlap","overlapCirc","hitbox","isCircle","halfWidth","testArcadeOverlap","CircleToCircle","CircleToRectangle","object1","object2","obj1","obj2","TriangleToCircle","RectangleToTriangle","part","TriangleToLine","Triangle","ContainsPoint","setRayRange","setDetectionRange","setCollisionRange","oldRangeMax","setRadius","isStatic","objectBounds","Ray","getStats","setRay","closed","slices","Raycaster","version","mapPoint","mapSegment","mapBoundingBox","rectangleMaps","polygonMaps","circleMaps","lineMaps","containerMaps","tilemapMaps","matterMaps","mapSegmentCount","world","walls","top","bottom","setOptions","autoUpdate","events","on","update","debug","_typeof","Object","assign","mapGameObjects","setBoundingBox","left","right","option","removeMappedObjects","enableMaps","disableMaps","mapppedObject","strokeRectShape","removeListener","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","d","definition","o","defineProperty","enumerable","obj","prop","r","Symbol","toStringTag"],"sourceRoot":""}